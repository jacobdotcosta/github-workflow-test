{"version":3,"file":"index.cjs.js","sources":["../src/scaffolder/actions/quarkus/createApp.example.ts","../src/scaffolder/actions/quarkus/createApp.ts","../src/scaffolder/actions/quarkus/quickstartClone.example.ts","../src/scaffolder/actions/quarkus/quickstartClone.ts"],"sourcesContent":["import {TemplateExample} from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n    {\n        description: 'Generate a quarkus application using code.quarkus.io',\n        example: yaml.stringify({\n            steps: [\n                {\n                    action: 'quarkus:app:create',\n                    id: 'quarkus-app-create',\n                    name: 'Create a Quarkus app',\n                    input: {\n                        values: {\n                            streamKey: 'io.quarkus.platform:3.8',\n                            groupId: 'io.quarkus',\n                            artifactId: 'cool-demo',\n                            version: '1.0',\n                            buildTool: 'MAVEN',\n                            javaVersion: '17',\n                            infoEndpoint: 'true',\n                            extensions: ['quarkus-resteasy-reactive-jackson', 'quarkus-kubernetes', 'io.quarkus:quarkus-hibernate-orm-panache'],\n                            starterCode: 'true'\n                        },\n                    },\n                },\n            ],\n        }),\n    },\n];\n","import {createTemplateAction} from '@backstage/plugin-scaffolder-node';\nimport fs from 'fs-extra';\nimport {resolveSafeChildPath} from '@backstage/backend-common';\nimport axios from 'axios';\nimport path from 'path';\nimport JSZip from 'jszip';\nimport {examples} from \"./createApp.example\";\n\nexport const createQuarkusApp = () => {\n    return createTemplateAction<{ url: string; targetPath: string, values: any }>({\n        id: 'quarkus:app:create',\n        description: 'Generates a Quarkus application using code.quarkus.io and extensions selected',\n        examples,\n        schema: {\n            input: {\n                type: 'object',\n                properties: {\n                    quarkusVersion: {\n                        title: 'quarkusVersion',\n                        description: 'The version of the quarkus framework',\n                        type: 'string'\n                    },\n                    groupId: {\n                        title: 'groupId',\n                        description: 'The maven groupId',\n                        type: 'string'\n                    },\n                    artifactId: {\n                        title: 'artifactId',\n                        description: 'The maven artifactId',\n                        type: 'string'\n                    },\n                    version: {\n                        title: 'version',\n                        description: 'The maven version',\n                        type: 'string'\n                    },\n                    buildTool: {\n                        title: 'buildTool',\n                        description: 'The java buildTool to be used: maven, gradle or gradle-kotlin-dsl',\n                        type: 'string',\n                        enum: ['MAVEN', 'GRADLE', 'GRADLE_KOTLIN_DSL'],\n                    },\n                    javaVersion: {\n                        title: 'javaVersion',\n                        description: 'The JDK version (e.g: 11)',\n                        type: 'string'\n                    },\n                    targetPath: {\n                        title: 'targetPath',\n                        description: 'The targetPath under the workspace',\n                        type: 'string'\n                    },\n                    extensions: {\n                        title: 'extensions',\n                        description: 'The Quarkus extensions to be added to the project generated',\n                        type: 'array',\n                        items: {\n                            type: 'string',\n                        },\n                    },\n                    additionalProperties: {\n                        title: 'additionalProperties',\n                        description: 'Quarkus properties to be added to src/main/resources/application.properties',\n                        type: 'string'\n                    },\n                    database: {\n                        title: 'database',\n                        description: 'The backend database to be connected for Hibernate, Panache, JPA, etc extensions',\n                        type: 'string'\n                    },\n                    infoEndpoint: {\n                        title: 'infoEndpoint',\n                        description: 'The information endpoint',\n                        type: 'boolean'\n                    },\n                    healthEndpoint: {\n                        title: 'healthEndpoint',\n                        description: 'The health endpoint',\n                        type: 'boolean'\n                    },\n                    metricsEndpoint: {\n                        title: 'metricsEndpoint',\n                        description: 'The metrics endpoint',\n                        type: 'boolean'\n                    },\n                    starterCode: {\n                        title: 'starterCode',\n                        description: 'Generate for the project some code to start ?',\n                        type: 'boolean'\n                    }\n                },\n            },\n        },\n\n        async handler(ctx) {\n            const apiUrl = 'https://code.quarkus.io/api/download'; // Replace with your API endpoint\n            const allExtensions = ctx.input.values.extensions ? ctx.input.values.extensions : [];\n            let noCode: string = \"false\";\n\n            if (ctx.input.values.infoEndpoint) {\n                allExtensions.push('quarkus-info');\n            }\n\n            if (ctx.input.values.metricsEndpoint) {\n                allExtensions.push('quarkus-micrometer');\n                allExtensions.push('quarkus-micrometer-registry-prometheus');\n            }\n\n            if (ctx.input.values.healthEndpoint) {\n                allExtensions.push('quarkus-smallrye-health');\n            }\n\n            if (ctx.input.values.database && ctx.input.values.database !== 'none') {\n                allExtensions.push(ctx.input.values.database);\n            }\n            // If the starterCode is true, then the value passed to \"noCode\" will be \"false\"\n            // to generate the starter code, otherwise \"noCode\" will be equal to \"true\"\n            if (! ctx.input.values.starterCode) {\n                noCode = \"true\";\n            }\n            const postData = {\n                streamKey: ctx.input.values.quarkusVersion ? ctx.input.values.quarkusVersion : 'io.quarkus.platform:3.8',\n                groupId: ctx.input.values.groupId ? ctx.input.values.groupId : 'org.acme',\n                artifactId: ctx.input.values.artifactId ? ctx.input.values.artifactId : 'code-with-quarkus',\n                version: ctx.input.values.version ? ctx.input.values.version : '1.0.0-SNAPSHOT',\n                buildTool: ctx.input.values.buildTool ? ctx.input.values.buildTool : 'MAVEN',\n                javaVersion: ctx.input.values.javaVersion ? ctx.input.values.javaVersion : '17',\n                extensions: allExtensions,\n                noCode: noCode\n            };\n\n            const appDirName = ctx.input.values.artifactId ? ctx.input.values.artifactId : 'code-with-quarkus';\n            const headers = {\n                'Content-Type': 'application/json', // Adjust as needed\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': '*',\n            };\n\n            await axios\n                .post(apiUrl, postData, {responseType: 'arraybuffer', headers})\n                .then((response) => {\n                    if (response.status === 200 && response.headers['content-type'] === 'application/zip') {\n                        const zipData = response.data;\n                        const targetPath = ctx.input.values.targetPath ?? './';\n                        const outputDir = resolveSafeChildPath(ctx.workspacePath, targetPath);\n                        ctx.createTemporaryDirectory().then((tempDir) => {\n\n                            const zipFilePath = path.join(tempDir, 'downloaded.zip');\n                            fs.writeFileSync(zipFilePath, zipData);\n\n                            fs.readFile(zipFilePath, function (err, data) {\n                                if (!err) {\n                                    const zip = new JSZip();\n                                    zip.loadAsync(data).then(function (contents) {\n                                        Object.keys(contents.files).forEach(function (filename) {\n                                            const zipFile = zip.file(filename);\n                                            if (zipFile) {\n                                                zipFile.async('nodebuffer').then(function (content) {\n                                                    // if filename starts with code-with-quarkus directory remove it\n                                                    if (filename.startsWith(appDirName)) {\n                                                        filename = filename.replace(appDirName + '/', '');\n                                                    }\n                                                    const dest = path.join(outputDir, filename);\n                                                    // Create directories if needed\n                                                    fs.promises.mkdir(path.dirname(dest), {recursive: true}).then(() => {\n                                                        fs.writeFileSync(dest, content);\n                                                    })\n                                                });\n                                            }\n                                        });\n                                    });\n                                }\n                            });\n                        });\n                        // If present, append additional properties to src/main/resources/application.properties\n                        if (ctx.input.values.additionalProperties) {\n                            const propertiesPath = path.join(outputDir, 'src/main/resources/application.properties');\n                            const propertiesContent = fs.readFileSync(propertiesPath, 'utf8');\n                            const updatedPropertiesContent = `${propertiesContent}\\n${ctx.input.values.additionalProperties}`;\n                            fs.writeFileSync(propertiesPath, `${updatedPropertiesContent}`);\n                        }\n                    }\n                }).catch((error) => {\n                    console.error('Error making HTTP POST request:', error);\n                });\n        },\n    });\n};\n","import { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n    {\n        description:\n            'Clones a Quarkus quickstart project from: https://github.com/quarkusio/quarkus-quickstarts.',\n        example: yaml.stringify({\n            steps: [\n                {\n                    action: 'quarkus:quickstart:clone',\n                    id: 'quarkus-quickstart-clone',\n                    name: 'Clone a quickstart project',\n                    input: {\n                        values: {\n                            groupId: 'io.quarkus',\n                            artifactId:  'cool-demo',\n                            version:  '1.0',\n                            quickstartName: 'hibernate-orm-quickstart',\n                        },\n                    },\n                },\n            ],\n        }),\n    },\n];\n","import { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport fs from 'fs-extra';\nimport { clone }  from 'isomorphic-git';\nimport http  from 'isomorphic-git/http/node';\nimport { resolveSafeChildPath } from '@backstage/backend-common';\nimport { DOMParser, XMLSerializer } from '@xmldom/xmldom';\nimport path from 'path';\nimport {examples} from \"./quickstartClone.example\";\n\nexport const cloneQuarkusQuickstart = () => {\n  return createTemplateAction<{ url: string; targetPath: string, values: any }>({\n    id: 'quarkus:quickstart:clone',\n    description: 'Clones a Quarkus quickstart project from: https://github.com/quarkusio/quarkus-quickstarts',\n    examples,\n      schema: {\n          input: {\n              type: 'object',\n              properties: {\n                  groupId: {\n                      title: 'groupId',\n                      description: 'The maven groupId',\n                      type: 'string'\n                  },\n                  artifactId: {\n                      title: 'artifactId',\n                      description: 'The maven artifactId',\n                      type: 'string'\n                  },\n                  version: {\n                      title: 'version',\n                      description: 'The maven version',\n                      type: 'string'\n                  },\n                  targetPath: {\n                      title: 'targetPath',\n                      description: 'The targetPath under the workspace',\n                      type: 'string'\n                  },\n                  additionalProperties: {\n                      title: 'additionalProperties',\n                      description: 'Quarkus properties to be added to src/main/resources/application.properties',\n                      type: 'string'\n                  },\n                  quickstartName: {\n                      title: 'quickstartName',\n                      description: 'The name of the quickstart github project to be cloned',\n                      type: 'string'\n                  },\n                  database: {\n                      title: 'database',\n                      description: 'The backend database to be connected for Hibernate, Panache, JPA, etc extensions',\n                      type: 'string'\n                  },\n                  infoEndpoint: {\n                      title: 'infoEndpoint',\n                      description: 'The information endpoint',\n                      type: 'boolean'\n                  },\n                  healthEndpoint: {\n                      title: 'healthEndpoint',\n                      description: 'The health endpoint',\n                      type: 'boolean'\n                  },\n                  metricsEndpoint: {\n                      title: 'metricsEndpoint',\n                      description: 'The metrics endpoint',\n                      type: 'boolean'\n                  },\n              },\n          },\n      },\n\n    async handler(ctx) {\n      const targetPath = ctx.input.values.targetPath ?? './';\n      const outputDir = resolveSafeChildPath(ctx.workspacePath, targetPath);\n      const groupId = ctx.input.values.groupId;\n      const artifactId = ctx.input.values.artifactId;\n      const version = ctx.input.values.version;\n      ctx.createTemporaryDirectory().then((tempDir) => {\n        const cloneDir = path.join(tempDir, 'downloaded.zip');\n        clone({\n          fs,\n          http,\n          dir: cloneDir,\n          url: `https://github.com/quarkusio/quarkus-quickstarts.git`,\n          noTags: true,\n          singleBranch: true, // Optional: Only clone a single branch (default is false)\n        }).then(() => {\n            // Copy all files from cloneDir to outputDir\n            const quickstartDir = path.join(cloneDir, ctx.input.values.quickstartName);\n            fs.copySync(quickstartDir, ctx.workspacePath);\n            // replace the artifactId in the pom.xml\n            const pomPath = path.join(outputDir, 'pom.xml');\n            const xml = fs.readFileSync(pomPath, 'utf8');\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(xml, 'text/xml');\n            if(groupId!==undefined) {\n              doc.getElementsByTagName('groupId')[0].textContent = groupId;\n            }\n            if(artifactId!==undefined) {\n              doc.getElementsByTagName('artifactId')[0].textContent = artifactId;\n            }\n            if(version!==undefined) {\n              doc.getElementsByTagName('version')[0].textContent = version;\n            }\n            const serializer = new XMLSerializer();\n            // write doc as XML back to file\n            fs.writeFileSync(pomPath, serializer.serializeToString(doc));\n\n            // If present, append additional properties to src/main/resources/application.properties\n            if (ctx.input.values.additionalProperties) {\n              const propertiesPath = path.join(outputDir, 'src/main/resources/application.properties');\n              const propertiesContent = fs.readFileSync(propertiesPath, 'utf8');\n              const updatedPropertiesContent = `${propertiesContent}\\n${ctx.input.values.additionalProperties}`;\n              fs.writeFileSync(propertiesPath, `${updatedPropertiesContent}`);\n            }\n        });\n      });\n    },\n  });\n};\n"],"names":["examples","yaml","createTemplateAction","axios","resolveSafeChildPath","path","fs","JSZip","clone","http","DOMParser","XMLSerializer"],"mappings":"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"}