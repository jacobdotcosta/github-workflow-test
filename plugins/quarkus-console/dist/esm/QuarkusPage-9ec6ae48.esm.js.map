{"version":3,"file":"QuarkusPage-9ec6ae48.esm.js","sources":["../../src/models.ts","../../src/services/getKubernetesResources.ts","../../src/services/useAllWatchResources.ts","../../src/services/useK8sResourcesClusters.ts","../../src/services/useK8sObjectsResponse.ts","../../src/components/ApplicationVolumeHealthCard.tsx","../../src/components/ApplicationJobHealthCard.tsx","../../src/components/ApplicationInitContainerHealthCard.tsx","../../src/components/ApplicationProbeHealthCard.tsx","../../src/components/QuarkusApplicationHealthCard.tsx","../../src/components/QuarkusApplicationMetricsCard.tsx","../../src/utils.ts","../../src/components/QuarkusApplicationConfigurationCard.tsx","../../src/components/QuarkusApplicationLoggingCard.tsx","../../src/components/QuarkusPage.tsx"],"sourcesContent":["import { GroupVersionKind, Model } from './types';\n\nexport const ReplicaSetGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  apiGroup: 'apps',\n  kind: 'ReplicaSet',\n};\n\nexport const PodGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  kind: 'Pod',\n};\n\nexport const DeploymentGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  apiGroup: 'apps',\n  kind: 'Deployment',\n};\n\nexport const ServiceGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  kind: 'Service',\n};\n\nexport const IngressesGVK: GroupVersionKind = {\n  apiVersion: 'networking.k8s.io/v1',\n  kind: 'Ingress',\n};\n\nexport const DaemonSetGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  apiGroup: 'apps',\n  kind: 'DaemonSet',\n};\n\nexport const StatefulSetGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  apiGroup: 'apps',\n  kind: 'StatefulSet',\n};\n\nexport const JobGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  apiGroup: 'batch',\n  kind: 'Job',\n};\n\nexport const CronJobGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  apiGroup: 'batch',\n  kind: 'CronJob',\n};\n\nexport const RouteGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  apiGroup: 'route.openshift.io',\n  kind: 'Route',\n};\n\nexport const CheClusterGVK: GroupVersionKind = {\n  apiVersion: 'v2',\n  apiGroup: 'org.eclipse.che',\n  kind: 'CheCluster',\n};\n\nexport const SecretGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  kind: 'Secret',\n};\n\nexport const ConfigMapGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  kind: 'ConfigMap',\n};\n\nexport const PersistentVolumeClaimGVK: GroupVersionKind = {\n  apiVersion: 'v1',\n  kind: 'PersistentVolumeClaim',\n};\n\nexport enum ModelsPlural {\n  pods = 'pods',\n  deployments = 'deployments',\n  replicasets = 'replicasets',\n  services = 'services',\n  ingresses = 'ingresses',\n  jobs = 'jobs',\n  daemonsets = 'daemonsets',\n  cronjobs = 'cronjobs',\n  statefulsets = 'statefulsets',\n  routes = 'routes',\n  configmaps = 'configmaps',\n  secrets = 'secrets',\n  persistentvolumeclaims = 'persistentvolumeclaims',\n}\n\nexport const resourceGVKs: { [key: string]: GroupVersionKind } = {\n  [ModelsPlural.deployments]: DeploymentGVK,\n  [ModelsPlural.pods]: PodGVK,\n  [ModelsPlural.replicasets]: ReplicaSetGVK,\n  [ModelsPlural.services]: ServiceGVK,\n  [ModelsPlural.ingresses]: IngressesGVK,\n  [ModelsPlural.daemonsets]: DaemonSetGVK,\n  [ModelsPlural.cronjobs]: CronJobGVK,\n  [ModelsPlural.jobs]: JobGVK,\n  [ModelsPlural.statefulsets]: StatefulSetGVK,\n  [ModelsPlural.routes]: RouteGVK,\n  [ModelsPlural.configmaps]: ConfigMapGVK,\n  [ModelsPlural.secrets]: SecretGVK,\n  [ModelsPlural.persistentvolumeclaims]: PersistentVolumeClaimGVK,\n};\n\nexport const DeploymentModel: Model = {\n  ...DeploymentGVK,\n  abbr: 'D',\n  labelPlural: 'Deployments',\n  color: '#004080',\n};\n\nexport const PodModel: Model = {\n  ...PodGVK,\n  abbr: 'P',\n  labelPlural: 'Pods',\n  color: '#009596',\n};\n\nexport const ServiceModel: Model = {\n  ...ServiceGVK,\n  abbr: 'S',\n  labelPlural: 'Services',\n  color: '#6ca100',\n};\n\nexport const IngressModel: Model = {\n  ...IngressesGVK,\n  labelPlural: 'Ingresses',\n  abbr: 'I',\n};\n\nexport const DaemonSetModel: Model = {\n  ...DaemonSetGVK,\n  abbr: 'DS',\n  labelPlural: 'DaemonSets',\n  color: '#004080',\n};\n\nexport const StatefulSetModel: Model = {\n  ...StatefulSetGVK,\n  abbr: 'SS',\n  labelPlural: 'StatefulSets',\n};\n\nexport const CronJobModel: Model = {\n  ...CronJobGVK,\n  abbr: 'CJ',\n  labelPlural: 'CronJobs',\n};\n\nexport const JobModel: Model = {\n  ...JobGVK,\n  abbr: 'J',\n  labelPlural: 'Jobs',\n  color: '#004080',\n};\n\nexport const RouteModel: Model = {\n  ...RouteGVK,\n  abbr: 'RT',\n  labelPlural: 'Routes',\n  plural: 'routes',\n  color: '#2b9af3',\n};\n\nexport const CheClusterModel: Model = {\n  ...CheClusterGVK,\n  abbr: 'CC',\n  labelPlural: 'CheClusters',\n  plural: 'checlusters',\n};\n\nexport const ConfigMapModel: Model = {\n  ...ConfigMapGVK,\n  abbr: 'CM',\n  labelPlural: 'ConfigMaps',\n  color: '#004080',\n};\n\nexport const SecretModel: Model = {\n  ...SecretGVK,\n  abbr: 'SC',\n  labelPlural: 'Secrets',\n  color: '#004080',\n};\n\nexport const PersistentVolumeClaimModel: Model = {\n  ...PersistentVolumeClaimGVK,\n  abbr: 'PVC',\n  labelPlural: 'PersistentVolumeClaims',\n  color: '#004080',\n};\n\nexport const resourceModels = {\n  [DeploymentModel.kind]: DeploymentModel,\n  [PodModel.kind]: PodModel,\n  [ServiceModel.kind]: ServiceModel,\n  [IngressModel.kind]: IngressModel,\n  [StatefulSetModel.kind]: StatefulSetModel,\n  [DaemonSetModel.kind]: DaemonSetModel,\n  [CronJobModel.kind]: CronJobModel,\n  [JobModel.kind]: JobModel,\n  [RouteModel.kind]: RouteModel,\n  [CheClusterModel.kind]: CheClusterModel,\n  [ConfigMapModel.kind]: ConfigMapModel,\n  [SecretModel.kind]: SecretModel,\n  [PersistentVolumeClaimModel.kind]: PersistentVolumeClaimModel,\n};\n","import { ObjectsByEntityResponse } from '@backstage/plugin-kubernetes-common';\nimport { ModelsPlural, resourceGVKs, resourceModels } from '../models';\nimport {\n  ClusterErrors,\n  K8sResponseData,\n  K8sWorkloadResource,\n} from '../types';\n\nexport const WORKLOAD_TYPES: string[] = [\n  ModelsPlural.deployments,\n  ModelsPlural.pods,\n  ModelsPlural.cronjobs,\n  ModelsPlural.jobs,\n  ModelsPlural.statefulsets,\n  ModelsPlural.daemonsets,\n];\n\nconst apiVersionForWorkloadType = (type: string) => {\n  return resourceGVKs[type]?.apiGroup\n    ? `${resourceGVKs[type].apiGroup}/${resourceGVKs[type].apiVersion}`\n    : resourceGVKs[type]?.apiVersion;\n};\n\nconst workloadKind = (type: string) => {\n  return resourceGVKs[type].kind;\n};\n\nexport const getClusters = (k8sObjects: ObjectsByEntityResponse) => {\n  const clusters: string[] = k8sObjects.items.map(\n    (item: any) => item.cluster.name,\n  );\n  const errors: ClusterErrors[] = k8sObjects.items.map(\n    (item: any) => item.errors,\n  );\n  return { clusters, errors };\n};\n\nexport const getCustomResourceKind = (resource: any): string => {\n  if (resource.kind) {\n    return resource.kind;\n  }\n\n  if (resource.spec.host && resource.status.ingress) {\n    return 'Route';\n  }\n  return '';\n};\n\nexport const getK8sResources = (\n  cluster: number,\n  k8sObjects: ObjectsByEntityResponse,\n) =>\n  k8sObjects.items?.[cluster]?.resources?.reduce(\n    (acc: K8sResponseData, res: any) => {\n      if (res.type === 'customresources' && res.resources.length > 0) {\n        const customResKind = getCustomResourceKind(res.resources[0]);\n        const customResKnownModel = resourceModels[customResKind];\n        return customResKnownModel?.plural\n          ? {\n              ...acc,\n              [customResKnownModel.plural]: {\n                data: res.resources.map((rval: K8sWorkloadResource) => ({\n                  ...rval,\n                  kind: customResKind,\n                  apiVersion: apiVersionForWorkloadType(customResKind),\n                })),\n              },\n            }\n          : acc;\n      }\n      return {\n        ...acc,\n        [res.type]: {\n          data:\n            (resourceGVKs[res.type] &&\n              res.resources.map((rval: K8sWorkloadResource) => ({\n                ...rval,\n                kind: workloadKind(res.type),\n                apiVersion: apiVersionForWorkloadType(res.type),\n              }))) ??\n            [],\n        },\n      };\n    },\n    {},\n  );\n\n\nexport const getWorkloadResources = (resources: K8sResponseData) => {\n  const workloadTypes = [...WORKLOAD_TYPES];\n  const workloadRes = workloadTypes\n    .map(resourceKind => {\n      return resources[resourceKind]\n        ? resources[resourceKind]?.data.map(res => {\n            const kind = res.kind;\n            const apiVersion = res.apiVersion;\n            return {\n              kind,\n              apiVersion,\n              ...res,\n            };\n          })\n        : [];\n    })\n    .flat();\n  return workloadRes;\n};\n","import { useEffect, useState } from 'react';\n\nimport { KubernetesObjects } from '@backstage/plugin-kubernetes';\n\nimport { K8sResponseData } from '../types';\nimport { getK8sResources } from './getKubernetesResources';\n\nexport const useAllWatchResources = (\n  watchedResource: string[] = [],\n  k8sObjectsResponse: KubernetesObjects,\n  cluster: number,\n): K8sResponseData => {\n  const { kubernetesObjects, loading, error } = k8sObjectsResponse;\n  const [resources, setResources] = useState<K8sResponseData>({});\n\n  useEffect(() => {\n    if (!loading && kubernetesObjects && !error) {\n      const k8sResources: K8sResponseData = getK8sResources(\n        cluster,\n        kubernetesObjects,\n      );\n      if (k8sResources) {\n        setResources(k8sResources);\n      }\n    }\n  }, [loading, kubernetesObjects, error, cluster]);\n\n  const watchResourcesData = watchedResource.reduce(\n    (acc: K8sResponseData, resKind) => {\n      if (resources[resKind]) {\n        acc[resKind] = resources[resKind];\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return watchResourcesData;\n};\n","import { useEffect, useState } from 'react';\n\nimport { KubernetesObjects } from '@backstage/plugin-kubernetes';\n\nimport { ClusterErrors } from '../types';\nimport { getClusters } from './getKubernetesResources';\n\nexport const useK8sResourcesClusters = (\n  k8sObjectsResponse: KubernetesObjects,\n) => {\n  const { kubernetesObjects, loading, error } = k8sObjectsResponse;\n  const [clusters, setClusters] = useState<{\n    clusters: string[];\n    errors: ClusterErrors[];\n  }>({ clusters: [], errors: [] });\n\n  useEffect(() => {\n    if (!loading && kubernetesObjects && !error) {\n      const k8sResourcesClusters = getClusters(kubernetesObjects);\n      if (k8sResourcesClusters) {\n        setClusters(k8sResourcesClusters);\n      }\n    }\n  }, [loading, kubernetesObjects, error]);\n\n  return clusters;\n};\n","import { useState } from 'react';\n\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport { useKubernetesObjects } from '@backstage/plugin-kubernetes';\n\nimport { K8sResourcesContextData } from '../types';\nimport { useAllWatchResources } from './useAllWatchResources';\nimport { useK8sResourcesClusters } from './useK8sResourcesClusters';\nimport { ModelsPlural } from '../models';\n\nimport {\n  V1Deployment,\n  V1Job,\n  V1Pod,\n  V1Secret,\n  V1ConfigMap,\n  V1PersistentVolumeClaim,\n} from '@kubernetes/client-node';\n\nexport const useK8sObjectsResponse = (\n    watchedResource: string[],\n): K8sResourcesContextData => {\n    const { entity } = useEntity();\n    const { kubernetesObjects, loading, error } = useKubernetesObjects(entity);\n    const [selectedCluster, setSelectedCluster] = useState<number>(0);\n    const watchResourcesData = useAllWatchResources(\n        watchedResource,\n        { kubernetesObjects, loading, error },\n        selectedCluster,\n    );\n    const { clusters, errors: clusterErrors } = useK8sResourcesClusters({\n        kubernetesObjects,\n        loading,\n        error,\n    });\n    return {\n        watchResourcesData,\n        loading,\n        responseError: error,\n        selectedClusterErrors: clusterErrors?.[selectedCluster] ?? [],\n        clusters,\n        setSelectedCluster,\n        selectedCluster,\n    };\n};\n\nexport const useDeployments = (componentName: string) : V1Deployment[] => {\n  const { watchResourcesData } = useK8sObjectsResponse([ModelsPlural.deployments]);\n    const deployments: V1Deployment[] = ((watchResourcesData?.deployments?.data ??  []) as V1Deployment[])\n      .filter((item: V1Deployment) => item && item.metadata && item.metadata.labels && \n      item.metadata.labels['backstage.io/kubernetes-id'] === componentName && \n      item.metadata.name && item.metadata.name.startsWith(componentName));\n      return deployments;\n};\n\nexport const usePods = () : V1Pod[] => {\n  const { watchResourcesData } = useK8sObjectsResponse([ModelsPlural.pods]);\n  return ((watchResourcesData?.pods?.data ??  []) as V1Pod[]);\n};\n\nexport const useJobs = () : V1Job[] => {\n  const { watchResourcesData } = useK8sObjectsResponse([ModelsPlural.jobs]);\n  return ((watchResourcesData?.jobs?.data ??  []) as V1Job[]);\n};\n\nexport const useAllSecrets = () : V1Secret[] => {\n  const { watchResourcesData } = useK8sObjectsResponse([ModelsPlural.secrets]);\n  return ((watchResourcesData?.secrets?.data ??  []) as V1Secret[]);\n};\n\nexport const useSecret = (namespace: string|undefined, name: string) : V1Secret => {\n  return useAllSecrets().filter((item: V1Secret) => item && item.metadata && item.metadata.namespace === namespace && item.metadata.name === name)[0];\n};\n\n\nexport const useAllConfigMaps = () : V1ConfigMap[] => {\n  const { watchResourcesData } = useK8sObjectsResponse([ModelsPlural.configmaps]);\n  return ((watchResourcesData?.configmaps?.data ??  []) as V1ConfigMap[]);\n};\n\nexport const useConfigMap = (namespace: string|undefined, name: string) : V1ConfigMap => {\n  return useAllConfigMaps().filter((item: V1ConfigMap) => item && item.metadata && item.metadata.namespace === namespace && item.metadata.name === name)[0];\n};\n\nexport const useAllPersistentVolumeClaims = () : V1PersistentVolumeClaim[] => {\n  const { watchResourcesData } = useK8sObjectsResponse([ModelsPlural.persistentvolumeclaims]);\n  return ((watchResourcesData?.persistentvolumeclaims?.data ??  []) as V1PersistentVolumeClaim[]);\n};\n\nexport const usePersistentVolumeClaim = (namespace: string|undefined, name: string) : V1PersistentVolumeClaim => {\n  return useAllPersistentVolumeClaims().filter((item: V1PersistentVolumeClaim) => item && item.metadata && item.metadata.namespace === namespace && item.metadata.name === name)[0];\n};\n","import React, { useEffect, useState } from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport Status from './ui/Status';\nimport { ApplicationPageProps } from '../types';\nimport { V1Container, V1Volume } from '@kubernetes/client-node';\nimport { useConfigMap, usePersistentVolumeClaim, useSecret } from '../services/useK8sObjectsResponse';\n\nconst ApplicationVolumeHealthCard: React.FC<ApplicationPageProps> = ({ application }) => {\n\n  const [volumes, setVolumes] = useState(application?.spec?.volumes ?? []);\n  const [volumeStatus, setVolumeStatus] = useState<VolumeStatus>({});\n\n  useEffect(() => {\n    setVolumes(application?.spec?.volumes ?? []);\n  }, [application]);\n\n  useEffect(() => {\n    if (application && application.metadata) {\n      volumes.forEach((volume: V1Volume) => {\n        const kind = volumeKind(volume);\n        switch (kind) {\n          case 'ConfigMap':\n            const configMap = useConfigMap(application.metadata?.namespace, volume.name);\n            updateVolumeStatus(volume.name, configMap ?  \"Succeeded\" : \"Pending\");\n            break;\n          case 'Secret':\n            const secret = useSecret(application.metadata?.namespace, volume.name);\n            updateVolumeStatus(volume.name, secret ?  \"Succeeded\" : \"Pending\");\n            break;\n          case 'PersistentVolumeClaim':\n            const pvc = usePersistentVolumeClaim(application.metadata?.namespace, volume.name);\n            updateVolumeStatus(volume.name, pvc ?  \"Succeeded\" : \"Pending\");\n            break;\n          default:\n          console.log('Unknown volume kind: ' + kind);\n        }\n      });\n    }\n  }, [volumes, application.metadata?.namespace]);\n\n  type VolumeStatus = {\n    [key: string]: string;\n  };\n\n  const updateVolumeStatus = (name: string, status: string) => {\n    setVolumeStatus((prevStatus: VolumeStatus) => ({\n      ...prevStatus,\n      [name]: status,\n    }));\n  }; \n\n  const volumeKind = (volume: V1Volume) => {\n    if (volume.configMap) {\n      return 'ConfigMap';\n    }\n    if (volume.secret) {\n      return 'Secret';\n    }\n    if (volume.emptyDir) {\n      return 'EmptyDir';\n    }\n    if (volume.persistentVolumeClaim) {\n      return 'PersistentVolumeClaim';\n    }\n    if (volume.hostPath) {\n      return 'HostPath';\n    }\n    if (volume.awsElasticBlockStore) {\n      return 'AWS Elastic Block Store';\n    }\n    if (volume.azureDisk) {\n      return 'Azure Disk';\n    }\n    if (volume.azureFile) {\n      return 'Azure File';\n    }\n    if (volume.cinder) {\n      return 'Cinder';\n    }\n    if (volume.downwardAPI) {\n      return 'Downward API';\n    }\n    if (volume.fc) {\n      return 'FC';\n    }\n    if (volume.flexVolume) {\n      return 'Flex Volume';\n    }\n    return 'Unknown';\n  };\n\n  const containerHasVolume = (container: V1Container, volumeName: string) => {\n    return container.volumeMounts?.filter((volumeMount: V1Volume) => volumeMount.name = volumeName);\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom>Volumes</Typography>\n        <List>\n          {application && application.spec && application.spec.volumes && application.spec.volumes.map(volume => (\n            <ListItem key={volume.name}>  \n              {volume.name}\n              <ListItemText primary={`Kind: ${volumeKind(volume)}`} />\n              <ul>\n                {application.spec?.containers?.filter((container: V1Container) => containerHasVolume(container, volume.name)).map((container: V1Container) => (\n                  <li key={container.name}>\n                    Container: {container.name}\n                    {container.volumeMounts?.filter((volumeMount) => volumeMount.name === volume.name).map((volumeMount) => (\n                      <ListItemText key={volumeMount.mountPath} primary={`Path: ${volumeMount.mountPath}`} />\n                    ))}\n                  </li>\n                ))}\n              </ul>\n              <ListItemText primary={`Status:`} secondary={volumeStatus[volume.name] ?? \"Pending\"} />\n              <Status\n                title={volumeStatus[volume.name] ?? \"Pending\"}\n                status={volumeStatus[volume.name] ?? \"Pending\"} />\n            </ListItem>\n          ))}\n        </List>\n      </CardContent>\n    </Card>\n  );\n};\n\n\nexport default ApplicationVolumeHealthCard;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n} from '@mui/material';\nimport { useJobs } from '../services/useK8sObjectsResponse';\n\nimport {\n  V1Job,\n} from '@kubernetes/client-node';\nimport Status from './ui/Status';\nimport { ApplicationPageProps } from '../types';\n\nconst ApplicationJobHealthCard: React.FC<ApplicationPageProps> = ({ application }) => {\n\n  const allJobs = useJobs();\n  const [jobs, setJobs] = useState<V1Job[]>([]);\n\n  useEffect(() => {\n    const newJobs: V1Job[] = [];\n    const name = application?.metadata?.name;\n    if (name) {\n      allJobs.filter((job: V1Job) => \n        job.metadata?.name?.startsWith(name) && job.metadata?.name.endsWith('-init'))\n        .forEach((job: V1Job) => {\n        newJobs.push(job);\n      })\n        setJobs(newJobs);\n    }\n  }, [application]);\n\n  const trimImage = (image: string|undefined) => {\n    if (!image) {\n      return image;\n    }\n\n    if (image.includes('@sha256')) {\n      const parts = image.split('@sha256:');\n      return parts[0] + '@sha256:' + parts[1].substring(0, 7);\n    }\n    return image;\n  };\n\n  const jobStatus = (job: V1Job) => {\n    if (job.status?.succeeded) {\n      return 'Succeeded';\n    }\n    if (job.status?.failed) {\n      return 'Failed';\n    }\n    if (job.status?.active) {\n      return 'Running';\n    }\n    return 'Unknown';\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"div\">\n          Jobs\n        </Typography>\n        <List>\n          {jobs &&\n            jobs.map((job, index) => (\n              <ListItem key={index}>\n                {job.metadata?.name}\n                {job.spec?.template?.spec?.containers.map((container, idx) => (\n                  <div key={idx}>\n                    <Typography>\n                      <strong>Name:</strong> {container.name}\n                    </Typography>\n                    <Typography>\n                      <strong>Image:</strong> {trimImage(container.image)}\n                    </Typography>\n                    <Typography>\n                      <strong>Command:</strong> {container.command}\n                    </Typography>\n                    <Typography>\n                      <strong>Args:</strong> {container.args}\n                    </Typography>\n                  </div>\n                ))}\n                <Typography>\n                  Status:{' '}\n                  <Status title={jobStatus(job)} status={jobStatus(job)} />\n                </Typography>\n              </ListItem>\n            ))}\n        </List>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ApplicationJobHealthCard;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n} from '@mui/material';\nimport { V1Container, V1Pod } from '@kubernetes/client-node';\nimport Status from './ui/Status';\nimport { usePods } from '../services/useK8sObjectsResponse';\nimport { ApplicationPageProps } from '../types';\n\nconst ApplicationInitContainerHealthCard: React.FC<ApplicationPageProps> = ({ application }) => {\n\n  const allPods = usePods();\n  const [pods, setPods] = useState<V1Pod[]>([]);\n\n  useEffect(() => {\n    if (application && application.metadata) {\n      setPods(allPods.filter((pod: V1Pod) => pod.metadata?.labels?.['app.kubernetes.io/name'] === application.metadata?.name));\n    }\n  }, [application]);\n\n  const trimImage = (image: string | undefined) => {\n    if (!image) {\n      return image;\n    }\n    if (image.includes('@sha256')) {\n      const parts = image.split('@sha256:');\n      return parts[0] + '@sha256:' + parts[1].substring(0, 7);\n    }\n    return image;\n  };\n\n  const initContainerStatus = (pods: V1Pod[], initContainerName: string) => {\n    const states = pods.flatMap(p => p.status?.initContainerStatuses?.filter(s => s.name === initContainerName).map(s => s.state));\n    if (states.some(s => s?.running)) {\n      return 'Pending';\n    }\n    if (states.every(s => s?.terminated?.reason === 'Completed')) {\n      return 'Succeeded';\n    }\n    if (states.some(s => s?.terminated?.reason === 'Failed')) {\n      return 'Failed';\n    }\n    return 'Unknown';\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"div\">\n          Init Containers\n        </Typography>\n        <List>\n          {application && application.spec && application.spec.initContainers && application.spec.initContainers.map((container: V1Container, index: number) => (\n            <ListItem key={index}>\n              <Typography variant=\"h6\">{container.name}</Typography>\n              <div>\n                <Typography><strong>Name:</strong> {container.name}</Typography>\n                <Typography><strong>Image:</strong> {trimImage(container.image)}</Typography>\n                <Typography><strong>Command:</strong> {container.command}</Typography>\n                <Typography><strong>Args:</strong> {container.args}</Typography>\n              </div>\n              <Typography>\n                Status:{' '}\n                <Status title={initContainerStatus(pods, container.name)} status={initContainerStatus(pods, container.name)} />\n              </Typography>\n            </ListItem>\n          ))}\n        </List>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ApplicationInitContainerHealthCard;\n","import React, { useEffect, useState } from 'react';\nimport { Card, CardContent, Typography } from '@mui/material';\nimport { ApplicationPageProps } from '../types';\nimport Status from './ui/Status';\n\nconst ApplicationProbeHealthCard: React.FC<ApplicationPageProps> = ({ application }) => {\n\n  const [probes, setProbes] = useState<ProbeInfo>({\n    readinessProbe: null,\n    livenessProbe: null,\n    startupProbe: null,\n  });\n\n  useEffect(() => {\n    if (application && application.spec && application.spec.containers && application.spec.containers.length > 0) {\n      const container = application.spec.containers[0]; // Assuming the first container\n      setProbes({\n        readinessProbe: container.readinessProbe ? container.readinessProbe.httpGet?.path || null : null,\n        livenessProbe: container.livenessProbe ? container.livenessProbe.httpGet?.path || null : null,\n        startupProbe: container.startupProbe ? container.startupProbe.httpGet?.path || null : null,\n      });\n    }\n  }, [application]);\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\" component=\"div\">\n          Probes\n        </Typography>\n        <Typography component=\"div\">\n          <p><strong>Startup Probe:</strong> <Status title={probes.startupProbe || 'N/A'} status={probes.startupProbe && application.status?.availableReplicas === application.status?.replicas ? \"Succeeded\" : \"Failed\"}/></p>\n          <p><strong>Readiness Probe:</strong> <Status title={probes.readinessProbe || 'N/A'} status={probes.readinessProbe && application.status?.availableReplicas === application.status?.replicas ? \"Succeeded\" : \"Failed\"}/></p>\n          <p><strong>Liveness Probe:</strong> <Status title={probes.livenessProbe || 'N/A'} status={probes.livenessProbe && application.status?.availableReplicas === application.status?.replicas ? \"Succeeded\" : \"Failed\"}/></p>\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\ntype ProbeInfo = {\n  readinessProbe: string | null;\n  livenessProbe: string | null;\n  startupProbe: string | null;\n};\n\nexport default ApplicationProbeHealthCard;\n","import * as React from 'react';\nimport { ApplicationPageProps } from '../types';\nimport ApplicationVolumeHealthCard from './ApplicationVolumeHealthCard';\nimport ApplicationJobHealthCard from './ApplicationJobHealthCard';\nimport ApplicationInitContainerHealthCard from './ApplicationInitContainerHealthCard';\nimport ApplicationProbeHealthCard from './ApplicationProbeHealthCard';\nimport { Card, CardContent, Typography } from '@material-ui/core';\n\nconst QuarkusApplicationHealthCard: React.FC<ApplicationPageProps> = ({ application }) => {\n\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom>Configuration</Typography>\n        <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n          {/* First Row */}\n          <div style={{ display: 'flex', flexDirection: 'row', flex: '1', height: '50%' }}>\n            <div style={{ flex: '1', padding: '8px' }}>\n              <ApplicationProbeHealthCard application={application} />\n            </div>\n            <div style={{ flex: '1', padding: '8px' }}>\n              <ApplicationVolumeHealthCard application={application} />\n            </div>\n          </div>\n          {/* Second Row */}\n          <div style={{ display: 'flex', flexDirection: 'row', flex: '1', height: '50%' }}>\n            <div style={{ flex: '1', padding: '8px', height: '100%' }}>\n              <ApplicationInitContainerHealthCard application={application} />\n            </div>\n            <div style={{ flex: '1', padding: '8px' }}>\n              <ApplicationJobHealthCard application={application} />\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default QuarkusApplicationHealthCard;\n","import React, { useEffect } from 'react';\nimport {  ApplicationPageProps } from '../types';\n\nexport const QuarkusApplicationMetricsCard: React.FC<ApplicationPageProps> = ({ application }) => {\n\n    useEffect(() => {\n      console.log('QuarkusApplicationLoggingCard: application:', application);\n    }, [application]);\n\n    return (\n    <>\n    </>\n    );\n};\n\nexport default QuarkusApplicationMetricsCard;\n","import { Application } from \"./types\";\nimport {\n  V1Container,\n  V1EnvFromSource\n} from '@kubernetes/client-node';\n\nexport function extractEnvironmentVariables(application: Application): Record<string, string> {\n  const envVars: Record<string, string> = {};\n\n  if (application.spec?.containers && application.spec.containers.length > 0) {\n    application.spec.containers.forEach((container: V1Container) => {\n      if (container.env) {\n        container.env.forEach((envVar) => {\n          if (envVar.name && envVar.value) {\n            envVars[envVar.name] = envVar.value;\n          }\n        });\n      }\n    });\n  }\n\n  return envVars;\n}\n\nexport function extractSecretEnvironmentVariables(application: Application): Record<string, string> {\n  const secretEnvVars: Record<string, string> = {};\n\n  // Check if the application has secret references\n  if (application.spec?.containers && application.spec.containers.length > 0) {\n    application.spec.containers.forEach((container: V1Container) => {\n      if (container.envFrom) {\n        container.envFrom.forEach((envSource: V1EnvFromSource) => {\n          if (envSource.secretRef && envSource.secretRef.name) {\n            // You can retrieve the secret name and handle it as needed\n            const secretName = envSource.secretRef.name;\n            // Add code here to fetch secret data and extract environment variables\n            secretEnvVars[secretName] = '';\n          }\n        });\n      }\n    });\n  }\n\n  return secretEnvVars;\n}\n\nexport function extractSecretKeyRefEnvironmentVariables(application: Application): Record<string, string> {\n  const secretEnvVars: Record<string, string> = {};\n\n  // Check if the application has secret references\n  if (application.spec?.containers && application.spec.containers.length > 0) {\n    application.spec.containers.forEach((container: V1Container) => {\n      if (container.envFrom) {\n        container.envFrom.forEach((envSource: V1EnvFromSource) => {\n          if (envSource && envSource.secretRef && envSource.secretRef.name) {\n            secretEnvVars[envSource.secretRef.name] = envSource.secretRef.name;\n          }\n        });\n      }\n    });\n  }\n\n  return secretEnvVars;\n}\n\nexport function extractConfigMapEnvironmentVariables(application: Application): Record<string, string> {\n  const configMapEnvVars: Record<string, string> = {};\n\n  // Check if the application has secret references\n  if (application.spec?.containers && application.spec.containers.length > 0) {\n    application.spec.containers.forEach((container: V1Container) => {\n      if (container.envFrom) {\n        container.envFrom.forEach((envSource) => {\n          if (envSource.configMapRef && envSource.configMapRef.name) {\n            // You can retrieve the secret name and handle it as needed\n            const configMapName = envSource.configMapRef.name;\n            // Add code here to fetch secret data and extract environment variables\n            configMapEnvVars[configMapName] = '';\n          }\n        });\n      }\n    });\n  }\n\n  return configMapEnvVars;\n}\n\nexport function extractConfigMaptKeyRefEnvironmentVariables(application: Application): Record<string, string> {\n  const configMapEnvVars: Record<string, string> = {};\n\n  // Check if the application has secret references\n  if (application.spec?.containers && application.spec.containers.length > 0) {\n    application.spec.containers.forEach((container) => {\n      if (container.envFrom) {\n        container.envFrom.forEach((envSource) => {\n          if (envSource.configMapRef && envSource.configMapRef.name) {\n            configMapEnvVars[envSource.configMapRef.name] = envSource.configMapRef.name;\n          }\n        });\n      }\n    });\n  }\n\n  return configMapEnvVars;\n}\n\nexport function extractMountedSecrets(application: Application): string[] {\n  const mountedSecrets: string[] = [];\n\n    application.spec?.volumes?.forEach((volume) => {\n      if (volume.secret && volume.secret.secretName) {\n        mountedSecrets.push(volume.secret.secretName);\n      }\n    });\n\n  return mountedSecrets;\n}\n\nexport function extractMountedConfigMaps(application: Application): string[] {\n  const mountedConfigMaps: string[] = [];\n    application.spec?.volumes?.forEach((volume) => {\n      if (volume.configMap && volume.configMap.name) {\n        mountedConfigMaps.push(volume.configMap.name);\n      }\n    });\n\n  return mountedConfigMaps;\n}\n\n\nexport function extractProbes(application: Application) {\n  const probes = {\n    readinessProbe: application.spec?.containers[0]?.readinessProbe || null,\n    livenessProbe: application.spec?.containers[0]?.livenessProbe || null,\n    startupProbe: application.spec?.containers[0]?.startupProbe || null,\n  };\n\n  return probes;\n}\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Tooltip,\n} from '@mui/material';\nimport { ApplicationPageProps } from '../types';\nimport { extractEnvironmentVariables, extractMountedConfigMaps, extractMountedSecrets } from '../utils';\n\nexport const QuarkusApplicationConfigurationCard: React.FC<ApplicationPageProps> = ({ application }) => {\n\n  type Description = {\n    [key: string]: string\n  };\n\n  const [envVars, setEnvVars] = useState<{ [key: string]: string }>({});\n  const [secrets, setSecrets] = useState<string[]>([]);\n  const [configMaps, setConfigMaps] = useState<string[]>([]);\n\n  const [descriptions, setDescriptions] = useState<Description>({});\n\n  useEffect(() => {\n    Object.entries(envVars).forEach(([key, _]) => {\n      fetchQuarkusConfigInfo(envVarToProperty(key)).then((description) => {\n        setDescriptions(prevDescriptions => ({\n          ...prevDescriptions,\n          [key]: description\n        }));       \n      });\n    });\n  }, [envVars]);\n\n  useEffect(() => {\n    if (application && application.spec) {\n      setEnvVars(extractEnvironmentVariables(application));\n      setSecrets(extractMountedSecrets(application));\n      setConfigMaps(extractMountedConfigMaps(application));\n    }\n  }, [application]);\n\n\n  function descriptionSafe(key: string): string {\n    return descriptions && descriptions[key] ? descriptions[key] : key;\n  }\n\n  function envVarToProperty(envVar: string): string {\n    return envVar.toLowerCase().replace(/_/g, '.');\n  }\n\n  /*\n  function propertyToEnvVar(property: string): string {\n    return property.toUpperCase().replace(/[^A-Z0-9]/g, '_');\n  }\n  */\n\n\n  async function fetchQuarkusConfigInfo(propertyName: string): Promise<string> {\n    // Split the property to find the last segment which is usually the actual property name\n   // const envVarName = propertyToEnvVar(propertyName);\n\n    // Fetch the Quarkus configuration guide page\n    const response = await fetch('https://quarkus.io/guides/all-config');\n    const html = await response.text();\n\n    // Use DOMParser to parse the HTML\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n\n    // Find the table element - adjust the selector as needed\n    const tables = doc.querySelectorAll('table');\n\n    let info = \"\";\n\n    // Iterate through all tables (if there are multiple tables for config properties)\n    tables.forEach((table) => {\n      // Iterate through each row in the table\n      table.querySelectorAll('tbody tr').forEach((row) => {\n        // Get the first cell (config key) and second cell (description)\n        const keyCell = row.querySelector('td:first-child');\n        const descriptionCell = row.querySelector('td:nth-child(1)');\n        const typeCell = row.querySelector('td:nth-child(2)');\n        const defaultCell = row.querySelector('td:nth-child(3)');\n\n        if (keyCell && descriptionCell && keyCell.textContent?.includes(propertyName)) {\n          // If the config key matches the property name, get the description\n          info = descriptionCell.textContent?.split('\\n')\n              .filter((line) => !line.startsWith(propertyName))\n              .filter((line) => !line.startsWith('Environment Variable'))\n              .filter((line) => !line.startsWith('Show more'))\n              .join('\\n') + ' \\n'\n              'Defaults to (' + typeCell?.textContent?.trim() + '): ' + defaultCell?.textContent?.trim();\n               \n        }\n      });\n    });\n    return info;\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom>Configuration</Typography>\n        {application &&\n          <>\n            <Typography component=\"p\">Name: {application.metadata?.name}</Typography>\n            <Typography component=\"p\">Environment Variables:</Typography>\n            <ul>\n              {Object.entries(envVars).map(([key, value]) => (\n                <li key={key}>\n                  <Tooltip title={descriptionSafe(key)}>\n                    <Typography component=\"p\"><strong>{key}:</strong>{value}</Typography>\n                  </Tooltip>\n                </li>\n              ))}\n            </ul>\n            <Typography component=\"p\">Secrets:</Typography>\n            <ul>\n              {secrets.map((secret) => (\n                <li key={secret}>\n                  {secret}\n                </li>\n              ))}\n            </ul>\n            <Typography component=\"p\">Config Maps:</Typography>\n            <ul>\n              {configMaps.map((configMap) => (\n                <li key={configMap}>\n                    configMap\n                </li>\n              ))}\n            </ul>\n          </>\n        }\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default QuarkusApplicationConfigurationCard;\n","import React, { useEffect } from 'react';\n\nimport {  ApplicationPageProps } from '../types';\n\nexport const QuarkusApplicationLoggingCard: React.FC<ApplicationPageProps> = ({ application }) => {\n\n    useEffect(() => {\n      console.log('QuarkusApplicationLoggingCard: application:', application);\n    }, [application]);\n\n    return (\n    <>\n    </>\n    );\n};\n\nexport default QuarkusApplicationLoggingCard;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Tab,\n  Tabs,\n} from '@mui/material';\nimport {\n  V1Deployment,\n} from '@kubernetes/client-node';\n\nimport { useLocation } from 'react-router-dom';\nimport { Application, K8sResource, deploymentToApplication } from '../types';\n\nimport QuarkusApplicationDetailsCard from './QuarkusApplicationDetailsCard';\nimport QuarkusApplicationHealthCard from './QuarkusApplicationHealthCard';\nimport QuarkusApplicationMetricsCard from './QuarkusApplicationMetricsCard';\nimport QuarkusApplicationConfigurationCard from './QuarkusApplicationConfigurationCard';\nimport QuarkusApplicationLoggingCard from './QuarkusApplicationLoggingCard';\nimport { ModelsPlural } from '../models';\nimport { useK8sObjectsResponse } from '../services/useK8sObjectsResponse';\n\nconst QuarkusPage = () => {\n  const watchedResources = [\n    ModelsPlural.deployments,\n    ModelsPlural.secrets,\n    ModelsPlural.configmaps,\n    ModelsPlural.persistentvolumeclaims,\n  ];\n\n  const k8sResourcesContextData = useK8sObjectsResponse(watchedResources);\n  const [application, setApplication] = useState<Application>();\n  const [activeTabKey, setActiveTabKey] = useState<number>(0);\n\n  const currentPageLocation = useLocation();\n\n  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n    setActiveTabKey(newValue);\n  };\n\n  useEffect(() => {\n    if (!k8sResourcesContextData) {\n      return;\n    } \n    const componentName = currentPageLocation.pathname.split(\"/\")[4];\n    const k8sResources: K8sResource[] | undefined = k8sResourcesContextData?.watchResourcesData?.deployments?.data;\n    const deployments: V1Deployment[] = (k8sResources ? k8sResources as V1Deployment[]: [])\n    .filter((item: V1Deployment) => item && item.metadata && item.metadata.labels && \n      item.metadata.labels['backstage.io/kubernetes-id'] === componentName && \n      item.metadata.name && item.metadata.name.startsWith(componentName));\n    if (deployments.length === 0) {\n      return;\n    }\n    console.log('deployments:', deployments[0]);\n    setApplication(deploymentToApplication(deployments[0])); \n  }, [currentPageLocation, k8sResourcesContextData]);\n\n  return (\n    <>\n      {application && application.metadata && <>\n        <Tabs value={activeTabKey} onChange={handleTabChange}>\n          <Tab label=\"Details\" />\n          <Tab label=\"Metrics\" />\n          <Tab label=\"Health\" />\n          <Tab label=\"Configuration\" />\n          <Tab label=\"Logging\" />\n        </Tabs>\n      {activeTabKey === 0 && (\n        <QuarkusApplicationDetailsCard application={application} />\n      )}\n      {activeTabKey === 1 && (\n        <QuarkusApplicationMetricsCard application={application} />\n      )}\n      {activeTabKey === 2 && (\n        <QuarkusApplicationHealthCard application={application} />\n      )}\n      {activeTabKey === 3 && (\n        <QuarkusApplicationConfigurationCard application={application} />\n      )}\n      {activeTabKey === 4 && (\n        <QuarkusApplicationLoggingCard application={application} />\n      )}\n      </>}\n      </>\n  );\n};\n\nexport default QuarkusPage;\n"],"names":["ModelsPlural","_a","_b","_c","React","Card","CardContent","Typography","List","ListItem","pods"],"mappings":";;;;;;;;;;;;;;;;;;;AAEO,MAAM,aAAkC,GAAA;AAAA,EAC7C,UAAY,EAAA,IAAA;AAAA,EACZ,QAAU,EAAA,MAAA;AAAA,EACV,IAAM,EAAA,YAAA;AACR,CAAA,CAAA;AAEO,MAAM,MAA2B,GAAA;AAAA,EACtC,UAAY,EAAA,IAAA;AAAA,EACZ,IAAM,EAAA,KAAA;AACR,CAAA,CAAA;AAEO,MAAM,aAAkC,GAAA;AAAA,EAC7C,UAAY,EAAA,IAAA;AAAA,EACZ,QAAU,EAAA,MAAA;AAAA,EACV,IAAM,EAAA,YAAA;AACR,CAAA,CAAA;AAEO,MAAM,UAA+B,GAAA;AAAA,EAC1C,UAAY,EAAA,IAAA;AAAA,EACZ,IAAM,EAAA,SAAA;AACR,CAAA,CAAA;AAEO,MAAM,YAAiC,GAAA;AAAA,EAC5C,UAAY,EAAA,sBAAA;AAAA,EACZ,IAAM,EAAA,SAAA;AACR,CAAA,CAAA;AAEO,MAAM,YAAiC,GAAA;AAAA,EAC5C,UAAY,EAAA,IAAA;AAAA,EACZ,QAAU,EAAA,MAAA;AAAA,EACV,IAAM,EAAA,WAAA;AACR,CAAA,CAAA;AAEO,MAAM,cAAmC,GAAA;AAAA,EAC9C,UAAY,EAAA,IAAA;AAAA,EACZ,QAAU,EAAA,MAAA;AAAA,EACV,IAAM,EAAA,aAAA;AACR,CAAA,CAAA;AAEO,MAAM,MAA2B,GAAA;AAAA,EACtC,UAAY,EAAA,IAAA;AAAA,EACZ,QAAU,EAAA,OAAA;AAAA,EACV,IAAM,EAAA,KAAA;AACR,CAAA,CAAA;AAEO,MAAM,UAA+B,GAAA;AAAA,EAC1C,UAAY,EAAA,IAAA;AAAA,EACZ,QAAU,EAAA,OAAA;AAAA,EACV,IAAM,EAAA,SAAA;AACR,CAAA,CAAA;AAEO,MAAM,QAA6B,GAAA;AAAA,EACxC,UAAY,EAAA,IAAA;AAAA,EACZ,QAAU,EAAA,oBAAA;AAAA,EACV,IAAM,EAAA,OAAA;AACR,CAAA,CAAA;AAEO,MAAM,aAAkC,GAAA;AAAA,EAC7C,UAAY,EAAA,IAAA;AAAA,EACZ,QAAU,EAAA,iBAAA;AAAA,EACV,IAAM,EAAA,YAAA;AACR,CAAA,CAAA;AAEO,MAAM,SAA8B,GAAA;AAAA,EACzC,UAAY,EAAA,IAAA;AAAA,EACZ,IAAM,EAAA,QAAA;AACR,CAAA,CAAA;AAEO,MAAM,YAAiC,GAAA;AAAA,EAC5C,UAAY,EAAA,IAAA;AAAA,EACZ,IAAM,EAAA,WAAA;AACR,CAAA,CAAA;AAEO,MAAM,wBAA6C,GAAA;AAAA,EACxD,UAAY,EAAA,IAAA;AAAA,EACZ,IAAM,EAAA,uBAAA;AACR,CAAA,CAAA;AAEY,IAAA,YAAA,qBAAAA,aAAL,KAAA;AACL,EAAAA,cAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,cAAA,aAAc,CAAA,GAAA,aAAA,CAAA;AACd,EAAAA,cAAA,aAAc,CAAA,GAAA,aAAA,CAAA;AACd,EAAAA,cAAA,UAAW,CAAA,GAAA,UAAA,CAAA;AACX,EAAAA,cAAA,WAAY,CAAA,GAAA,WAAA,CAAA;AACZ,EAAAA,cAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,cAAA,YAAa,CAAA,GAAA,YAAA,CAAA;AACb,EAAAA,cAAA,UAAW,CAAA,GAAA,UAAA,CAAA;AACX,EAAAA,cAAA,cAAe,CAAA,GAAA,cAAA,CAAA;AACf,EAAAA,cAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,cAAA,YAAa,CAAA,GAAA,YAAA,CAAA;AACb,EAAAA,cAAA,SAAU,CAAA,GAAA,SAAA,CAAA;AACV,EAAAA,cAAA,wBAAyB,CAAA,GAAA,wBAAA,CAAA;AAbf,EAAAA,OAAAA,aAAAA,CAAAA;AAAA,CAAA,EAAA,YAAA,IAAA,EAAA,CAAA,CAAA;AAgBL,MAAM,YAAoD,GAAA;AAAA,EAC/D,CAAC,kCAA2B,aAAA;AAAA,EAC5B,CAAC,oBAAoB,MAAA;AAAA,EACrB,CAAC,kCAA2B,aAAA;AAAA,EAC5B,CAAC,4BAAwB,UAAA;AAAA,EACzB,CAAC,8BAAyB,YAAA;AAAA,EAC1B,CAAC,gCAA0B,YAAA;AAAA,EAC3B,CAAC,4BAAwB,UAAA;AAAA,EACzB,CAAC,oBAAoB,MAAA;AAAA,EACrB,CAAC,oCAA4B,cAAA;AAAA,EAC7B,CAAC,wBAAsB,QAAA;AAAA,EACvB,CAAC,gCAA0B,YAAA;AAAA,EAC3B,CAAC,0BAAuB,SAAA;AAAA,EACxB,CAAC,wDAAsC,wBAAA;AACzC,CAAA,CAAA;AAEO,MAAM,eAAyB,GAAA;AAAA,EACpC,GAAG,aAAA;AAAA,EACH,IAAM,EAAA,GAAA;AAAA,EACN,WAAa,EAAA,aAAA;AAAA,EACb,KAAO,EAAA,SAAA;AACT,CAAA,CAAA;AAEO,MAAM,QAAkB,GAAA;AAAA,EAC7B,GAAG,MAAA;AAAA,EACH,IAAM,EAAA,GAAA;AAAA,EACN,WAAa,EAAA,MAAA;AAAA,EACb,KAAO,EAAA,SAAA;AACT,CAAA,CAAA;AAEO,MAAM,YAAsB,GAAA;AAAA,EACjC,GAAG,UAAA;AAAA,EACH,IAAM,EAAA,GAAA;AAAA,EACN,WAAa,EAAA,UAAA;AAAA,EACb,KAAO,EAAA,SAAA;AACT,CAAA,CAAA;AAEO,MAAM,YAAsB,GAAA;AAAA,EACjC,GAAG,YAAA;AAAA,EACH,WAAa,EAAA,WAAA;AAAA,EACb,IAAM,EAAA,GAAA;AACR,CAAA,CAAA;AAEO,MAAM,cAAwB,GAAA;AAAA,EACnC,GAAG,YAAA;AAAA,EACH,IAAM,EAAA,IAAA;AAAA,EACN,WAAa,EAAA,YAAA;AAAA,EACb,KAAO,EAAA,SAAA;AACT,CAAA,CAAA;AAEO,MAAM,gBAA0B,GAAA;AAAA,EACrC,GAAG,cAAA;AAAA,EACH,IAAM,EAAA,IAAA;AAAA,EACN,WAAa,EAAA,cAAA;AACf,CAAA,CAAA;AAEO,MAAM,YAAsB,GAAA;AAAA,EACjC,GAAG,UAAA;AAAA,EACH,IAAM,EAAA,IAAA;AAAA,EACN,WAAa,EAAA,UAAA;AACf,CAAA,CAAA;AAEO,MAAM,QAAkB,GAAA;AAAA,EAC7B,GAAG,MAAA;AAAA,EACH,IAAM,EAAA,GAAA;AAAA,EACN,WAAa,EAAA,MAAA;AAAA,EACb,KAAO,EAAA,SAAA;AACT,CAAA,CAAA;AAEO,MAAM,UAAoB,GAAA;AAAA,EAC/B,GAAG,QAAA;AAAA,EACH,IAAM,EAAA,IAAA;AAAA,EACN,WAAa,EAAA,QAAA;AAAA,EACb,MAAQ,EAAA,QAAA;AAAA,EACR,KAAO,EAAA,SAAA;AACT,CAAA,CAAA;AAEO,MAAM,eAAyB,GAAA;AAAA,EACpC,GAAG,aAAA;AAAA,EACH,IAAM,EAAA,IAAA;AAAA,EACN,WAAa,EAAA,aAAA;AAAA,EACb,MAAQ,EAAA,aAAA;AACV,CAAA,CAAA;AAEO,MAAM,cAAwB,GAAA;AAAA,EACnC,GAAG,YAAA;AAAA,EACH,IAAM,EAAA,IAAA;AAAA,EACN,WAAa,EAAA,YAAA;AAAA,EACb,KAAO,EAAA,SAAA;AACT,CAAA,CAAA;AAEO,MAAM,WAAqB,GAAA;AAAA,EAChC,GAAG,SAAA;AAAA,EACH,IAAM,EAAA,IAAA;AAAA,EACN,WAAa,EAAA,SAAA;AAAA,EACb,KAAO,EAAA,SAAA;AACT,CAAA,CAAA;AAEO,MAAM,0BAAoC,GAAA;AAAA,EAC/C,GAAG,wBAAA;AAAA,EACH,IAAM,EAAA,KAAA;AAAA,EACN,WAAa,EAAA,wBAAA;AAAA,EACb,KAAO,EAAA,SAAA;AACT,CAAA,CAAA;AAEO,MAAM,cAAiB,GAAA;AAAA,EAC5B,CAAC,eAAgB,CAAA,IAAI,GAAG,eAAA;AAAA,EACxB,CAAC,QAAS,CAAA,IAAI,GAAG,QAAA;AAAA,EACjB,CAAC,YAAa,CAAA,IAAI,GAAG,YAAA;AAAA,EACrB,CAAC,YAAa,CAAA,IAAI,GAAG,YAAA;AAAA,EACrB,CAAC,gBAAiB,CAAA,IAAI,GAAG,gBAAA;AAAA,EACzB,CAAC,cAAe,CAAA,IAAI,GAAG,cAAA;AAAA,EACvB,CAAC,YAAa,CAAA,IAAI,GAAG,YAAA;AAAA,EACrB,CAAC,QAAS,CAAA,IAAI,GAAG,QAAA;AAAA,EACjB,CAAC,UAAW,CAAA,IAAI,GAAG,UAAA;AAAA,EACnB,CAAC,eAAgB,CAAA,IAAI,GAAG,eAAA;AAAA,EACxB,CAAC,cAAe,CAAA,IAAI,GAAG,cAAA;AAAA,EACvB,CAAC,WAAY,CAAA,IAAI,GAAG,WAAA;AAAA,EACpB,CAAC,0BAA2B,CAAA,IAAI,GAAG,0BAAA;AACrC,CAAA;;AC/MwC;AAAA,EACtC,YAAa,CAAA,WAAA;AAAA,EACb,YAAa,CAAA,IAAA;AAAA,EACb,YAAa,CAAA,QAAA;AAAA,EACb,YAAa,CAAA,IAAA;AAAA,EACb,YAAa,CAAA,YAAA;AAAA,EACb,YAAa,CAAA,UAAA;AACf,EAAA;AAEA,MAAM,yBAAA,GAA4B,CAAC,IAAiB,KAAA;AAjBpD,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAkBE,EAAA,OAAA,CAAA,CAAO,kBAAa,IAAI,CAAA,KAAjB,mBAAoB,QACvB,IAAA,CAAA,EAAG,aAAa,IAAI,CAAA,CAAE,QAAQ,CAAI,CAAA,EAAA,YAAA,CAAa,IAAI,CAAE,CAAA,UAAU,MAC/D,EAAa,GAAA,YAAA,CAAA,IAAI,MAAjB,IAAoB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAA,CAAA;AAC1B,CAAA,CAAA;AAEA,MAAM,YAAA,GAAe,CAAC,IAAiB,KAAA;AACrC,EAAO,OAAA,YAAA,CAAa,IAAI,CAAE,CAAA,IAAA,CAAA;AAC5B,CAAA,CAAA;AAEa,MAAA,WAAA,GAAc,CAAC,UAAwC,KAAA;AAClE,EAAM,MAAA,QAAA,GAAqB,WAAW,KAAM,CAAA,GAAA;AAAA,IAC1C,CAAC,IAAc,KAAA,IAAA,CAAK,OAAQ,CAAA,IAAA;AAAA,GAC9B,CAAA;AACA,EAAM,MAAA,MAAA,GAA0B,WAAW,KAAM,CAAA,GAAA;AAAA,IAC/C,CAAC,SAAc,IAAK,CAAA,MAAA;AAAA,GACtB,CAAA;AACA,EAAO,OAAA,EAAE,UAAU,MAAO,EAAA,CAAA;AAC5B,CAAA,CAAA;AAEa,MAAA,qBAAA,GAAwB,CAAC,QAA0B,KAAA;AAC9D,EAAA,IAAI,SAAS,IAAM,EAAA;AACjB,IAAA,OAAO,QAAS,CAAA,IAAA,CAAA;AAAA,GAClB;AAEA,EAAA,IAAI,QAAS,CAAA,IAAA,CAAK,IAAQ,IAAA,QAAA,CAAS,OAAO,OAAS,EAAA;AACjD,IAAO,OAAA,OAAA,CAAA;AAAA,GACT;AACA,EAAO,OAAA,EAAA,CAAA;AACT,CAAA,CAAA;AAEa,MAAA,eAAA,GAAkB,CAC7B,OAAA,EACA,UACA,KAAA;AAnDF,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAoDE,EAAA,OAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,UAAA,CAAW,KAAX,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAmB,OAAnB,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA6B,cAA7B,IAAwC,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA;AAAA,IACtC,CAAC,KAAsB,GAAa,KAAA;AArDxC,MAAAC,IAAAA,GAAAA,CAAAA;AAsDM,MAAA,IAAI,IAAI,IAAS,KAAA,iBAAA,IAAqB,GAAI,CAAA,SAAA,CAAU,SAAS,CAAG,EAAA;AAC9D,QAAA,MAAM,aAAgB,GAAA,qBAAA,CAAsB,GAAI,CAAA,SAAA,CAAU,CAAC,CAAC,CAAA,CAAA;AAC5D,QAAM,MAAA,mBAAA,GAAsB,eAAe,aAAa,CAAA,CAAA;AACxD,QAAA,OAAA,CAAO,2DAAqB,MACxB,IAAA;AAAA,UACE,GAAG,GAAA;AAAA,UACH,CAAC,mBAAoB,CAAA,MAAM,GAAG;AAAA,YAC5B,IAAM,EAAA,GAAA,CAAI,SAAU,CAAA,GAAA,CAAI,CAAC,IAA+B,MAAA;AAAA,cACtD,GAAG,IAAA;AAAA,cACH,IAAM,EAAA,aAAA;AAAA,cACN,UAAA,EAAY,0BAA0B,aAAa,CAAA;AAAA,aACnD,CAAA,CAAA;AAAA,WACJ;AAAA,SAEF,GAAA,GAAA,CAAA;AAAA,OACN;AACA,MAAO,OAAA;AAAA,QACL,GAAG,GAAA;AAAA,QACH,CAAC,GAAI,CAAA,IAAI,GAAG;AAAA,UACV,IAAA,EAAA,CACGA,GAAA,GAAA,YAAA,CAAa,GAAI,CAAA,IAAI,KACpB,GAAI,CAAA,SAAA,CAAU,GAAI,CAAA,CAAC,IAA+B,MAAA;AAAA,YAChD,GAAG,IAAA;AAAA,YACH,IAAA,EAAM,YAAa,CAAA,GAAA,CAAI,IAAI,CAAA;AAAA,YAC3B,UAAA,EAAY,yBAA0B,CAAA,GAAA,CAAI,IAAI,CAAA;AAAA,WAC9C,CAAA,CAAA,KALH,IAAAA,GAAAA,GAAAA,GAMD,EAAC;AAAA,SACL;AAAA,OACF,CAAA;AAAA,KACF;AAAA,IACA,EAAC;AAAA,GAAA,CAAA;AAAA,CAAA;;AC7EE,MAAM,uBAAuB,CAClC,eAAA,GAA4B,EAAC,EAC7B,oBACA,OACoB,KAAA;AACpB,EAAA,MAAM,EAAE,iBAAA,EAAmB,OAAS,EAAA,KAAA,EAAU,GAAA,kBAAA,CAAA;AAC9C,EAAA,MAAM,CAAC,SAAW,EAAA,YAAY,CAAI,GAAA,QAAA,CAA0B,EAAE,CAAA,CAAA;AAE9D,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,CAAC,OAAA,IAAW,iBAAqB,IAAA,CAAC,KAAO,EAAA;AAC3C,MAAA,MAAM,YAAgC,GAAA,eAAA;AAAA,QACpC,OAAA;AAAA,QACA,iBAAA;AAAA,OACF,CAAA;AACA,MAAA,IAAI,YAAc,EAAA;AAChB,QAAA,YAAA,CAAa,YAAY,CAAA,CAAA;AAAA,OAC3B;AAAA,KACF;AAAA,KACC,CAAC,OAAA,EAAS,iBAAmB,EAAA,KAAA,EAAO,OAAO,CAAC,CAAA,CAAA;AAE/C,EAAA,MAAM,qBAAqB,eAAgB,CAAA,MAAA;AAAA,IACzC,CAAC,KAAsB,OAAY,KAAA;AACjC,MAAI,IAAA,SAAA,CAAU,OAAO,CAAG,EAAA;AACtB,QAAI,GAAA,CAAA,OAAO,CAAI,GAAA,SAAA,CAAU,OAAO,CAAA,CAAA;AAAA,OAClC;AACA,MAAO,OAAA,GAAA,CAAA;AAAA,KACT;AAAA,IACA,EAAC;AAAA,GACH,CAAA;AAEA,EAAO,OAAA,kBAAA,CAAA;AACT,CAAA;;AC/Ba,MAAA,uBAAA,GAA0B,CACrC,kBACG,KAAA;AACH,EAAA,MAAM,EAAE,iBAAA,EAAmB,OAAS,EAAA,KAAA,EAAU,GAAA,kBAAA,CAAA;AAC9C,EAAA,MAAM,CAAC,QAAA,EAAU,WAAW,CAAA,GAAI,QAG7B,CAAA,EAAE,QAAU,EAAA,EAAI,EAAA,MAAA,EAAQ,EAAC,EAAG,CAAA,CAAA;AAE/B,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,CAAC,OAAA,IAAW,iBAAqB,IAAA,CAAC,KAAO,EAAA;AAC3C,MAAM,MAAA,oBAAA,GAAuB,YAAY,iBAAiB,CAAA,CAAA;AAC1D,MAAA,IAAI,oBAAsB,EAAA;AACxB,QAAA,WAAA,CAAY,oBAAoB,CAAA,CAAA;AAAA,OAClC;AAAA,KACF;AAAA,GACC,EAAA,CAAC,OAAS,EAAA,iBAAA,EAAmB,KAAK,CAAC,CAAA,CAAA;AAEtC,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;;ACPa,MAAA,qBAAA,GAAwB,CACjC,eAC0B,KAAA;AArB9B,EAAA,IAAA,EAAA,CAAA;AAsBI,EAAM,MAAA,EAAE,MAAO,EAAA,GAAI,SAAU,EAAA,CAAA;AAC7B,EAAA,MAAM,EAAE,iBAAmB,EAAA,OAAA,EAAS,KAAM,EAAA,GAAI,qBAAqB,MAAM,CAAA,CAAA;AACzE,EAAA,MAAM,CAAC,eAAA,EAAiB,kBAAkB,CAAA,GAAI,SAAiB,CAAC,CAAA,CAAA;AAChE,EAAA,MAAM,kBAAqB,GAAA,oBAAA;AAAA,IACvB,eAAA;AAAA,IACA,EAAE,iBAAmB,EAAA,OAAA,EAAS,KAAM,EAAA;AAAA,IACpC,eAAA;AAAA,GACJ,CAAA;AACA,EAAA,MAAM,EAAE,QAAA,EAAU,MAAQ,EAAA,aAAA,KAAkB,uBAAwB,CAAA;AAAA,IAChE,iBAAA;AAAA,IACA,OAAA;AAAA,IACA,KAAA;AAAA,GACH,CAAA,CAAA;AACD,EAAO,OAAA;AAAA,IACH,kBAAA;AAAA,IACA,OAAA;AAAA,IACA,aAAe,EAAA,KAAA;AAAA,IACf,qBAAuB,EAAA,CAAA,EAAA,GAAA,aAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAgB,eAAhB,CAAA,KAAA,IAAA,GAAA,EAAA,GAAoC,EAAC;AAAA,IAC5D,QAAA;AAAA,IACA,kBAAA;AAAA,IACA,eAAA;AAAA,GACJ,CAAA;AACJ,CAAA,CAAA;AAWO,MAAM,UAAU,MAAgB;AAvDvC,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAwDE,EAAA,MAAM,EAAE,kBAAmB,EAAA,GAAI,sBAAsB,CAAC,YAAA,CAAa,IAAI,CAAC,CAAA,CAAA;AACxE,EAAA,OAAA,CAAS,EAAoB,GAAA,CAAA,EAAA,GAAA,kBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,kBAAA,CAAA,IAAA,KAApB,IAA0B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,KAA1B,YAAmC,EAAC,CAAA;AAC/C,CAAA,CAAA;AAEO,MAAM,UAAU,MAAgB;AA5DvC,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA6DE,EAAA,MAAM,EAAE,kBAAmB,EAAA,GAAI,sBAAsB,CAAC,YAAA,CAAa,IAAI,CAAC,CAAA,CAAA;AACxE,EAAA,OAAA,CAAS,EAAoB,GAAA,CAAA,EAAA,GAAA,kBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,kBAAA,CAAA,IAAA,KAApB,IAA0B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,KAA1B,YAAmC,EAAC,CAAA;AAC/C,CAAA,CAAA;AAEO,MAAM,gBAAgB,MAAmB;AAjEhD,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAkEE,EAAA,MAAM,EAAE,kBAAmB,EAAA,GAAI,sBAAsB,CAAC,YAAA,CAAa,OAAO,CAAC,CAAA,CAAA;AAC3E,EAAA,OAAA,CAAS,EAAoB,GAAA,CAAA,EAAA,GAAA,kBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,kBAAA,CAAA,OAAA,KAApB,IAA6B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,KAA7B,YAAsC,EAAC,CAAA;AAClD,CAAA,CAAA;AAEa,MAAA,SAAA,GAAY,CAAC,SAAA,EAA6B,IAA4B,KAAA;AACjF,EAAA,OAAO,eAAgB,CAAA,MAAA,CAAO,CAAC,IAAA,KAAmB,QAAQ,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,QAAA,CAAS,cAAc,SAAa,IAAA,IAAA,CAAK,SAAS,IAAS,KAAA,IAAI,EAAE,CAAC,CAAA,CAAA;AACpJ,CAAA,CAAA;AAGO,MAAM,mBAAmB,MAAsB;AA3EtD,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA4EE,EAAA,MAAM,EAAE,kBAAmB,EAAA,GAAI,sBAAsB,CAAC,YAAA,CAAa,UAAU,CAAC,CAAA,CAAA;AAC9E,EAAA,OAAA,CAAS,EAAoB,GAAA,CAAA,EAAA,GAAA,kBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,kBAAA,CAAA,UAAA,KAApB,IAAgC,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,KAAhC,YAAyC,EAAC,CAAA;AACrD,CAAA,CAAA;AAEa,MAAA,YAAA,GAAe,CAAC,SAAA,EAA6B,IAA+B,KAAA;AACvF,EAAA,OAAO,kBAAmB,CAAA,MAAA,CAAO,CAAC,IAAA,KAAsB,QAAQ,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,QAAA,CAAS,cAAc,SAAa,IAAA,IAAA,CAAK,SAAS,IAAS,KAAA,IAAI,EAAE,CAAC,CAAA,CAAA;AAC1J,CAAA,CAAA;AAEO,MAAM,+BAA+B,MAAkC;AApF9E,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAqFE,EAAA,MAAM,EAAE,kBAAmB,EAAA,GAAI,sBAAsB,CAAC,YAAA,CAAa,sBAAsB,CAAC,CAAA,CAAA;AAC1F,EAAA,OAAA,CAAS,EAAoB,GAAA,CAAA,EAAA,GAAA,kBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,kBAAA,CAAA,sBAAA,KAApB,IAA4C,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,KAA5C,YAAqD,EAAC,CAAA;AACjE,CAAA,CAAA;AAEa,MAAA,wBAAA,GAA2B,CAAC,SAAA,EAA6B,IAA2C,KAAA;AAC/G,EAAA,OAAO,8BAA+B,CAAA,MAAA,CAAO,CAAC,IAAA,KAAkC,QAAQ,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,QAAA,CAAS,cAAc,SAAa,IAAA,IAAA,CAAK,SAAS,IAAS,KAAA,IAAI,EAAE,CAAC,CAAA,CAAA;AAClL,CAAA;;AC/EA,MAAM,2BAA8D,GAAA,CAAC,EAAE,WAAA,EAAkB,KAAA;AAZzF,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAcE,EAAM,MAAA,CAAC,OAAS,EAAA,UAAU,CAAI,GAAA,QAAA,CAAA,CAAS,EAAa,GAAA,CAAA,EAAA,GAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAA,IAAA,KAAb,IAAmB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,KAAnB,IAA8B,GAAA,EAAA,GAAA,EAAE,CAAA,CAAA;AACvE,EAAA,MAAM,CAAC,YAAc,EAAA,eAAe,CAAI,GAAA,QAAA,CAAuB,EAAE,CAAA,CAAA;AAEjE,EAAA,SAAA,CAAU,MAAM;AAjBlB,IAAA,IAAAA,GAAAC,EAAAA,GAAAA,CAAAA;AAkBI,IAAWA,UAAAA,CAAAA,CAAAA,GAAAA,GAAAA,CAAAD,GAAA,GAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAa,IAAb,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAmB,OAAnB,KAAA,IAAA,GAAAC,GAA8B,GAAA,EAAE,CAAA,CAAA;AAAA,GAC7C,EAAG,CAAC,WAAW,CAAC,CAAA,CAAA;AAEhB,EAAA,SAAA,CAAU,MAAM;AACd,IAAI,IAAA,WAAA,IAAe,YAAY,QAAU,EAAA;AACvC,MAAQ,OAAA,CAAA,OAAA,CAAQ,CAAC,MAAqB,KAAA;AAvB5C,QAAA,IAAAD,KAAAC,GAAAC,EAAAA,GAAAA,CAAAA;AAwBQ,QAAM,MAAA,IAAA,GAAO,WAAW,MAAM,CAAA,CAAA;AAC9B,QAAA,QAAQ,IAAM;AAAA,UACZ,KAAK,WAAA;AACH,YAAM,MAAA,SAAA,GAAY,cAAaF,GAAA,GAAA,WAAA,CAAY,aAAZ,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAAA,CAAsB,SAAW,EAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AAC3E,YAAA,kBAAA,CAAmB,MAAO,CAAA,IAAA,EAAM,SAAa,GAAA,WAAA,GAAc,SAAS,CAAA,CAAA;AACpE,YAAA,MAAA;AAAA,UACF,KAAK,QAAA;AACH,YAAM,MAAA,MAAA,GAAS,WAAUC,GAAA,GAAA,WAAA,CAAY,aAAZ,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAAA,CAAsB,SAAW,EAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AACrE,YAAA,kBAAA,CAAmB,MAAO,CAAA,IAAA,EAAM,MAAU,GAAA,WAAA,GAAc,SAAS,CAAA,CAAA;AACjE,YAAA,MAAA;AAAA,UACF,KAAK,uBAAA;AACH,YAAM,MAAA,GAAA,GAAM,0BAAyBC,GAAA,GAAA,WAAA,CAAY,aAAZ,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAAA,CAAsB,SAAW,EAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AACjF,YAAA,kBAAA,CAAmB,MAAO,CAAA,IAAA,EAAM,GAAO,GAAA,WAAA,GAAc,SAAS,CAAA,CAAA;AAC9D,YAAA,MAAA;AAAA,UACF;AACA,YAAQ,OAAA,CAAA,GAAA,CAAI,0BAA0B,IAAI,CAAA,CAAA;AAAA,SAC5C;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AAAA,KACC,CAAC,OAAA,EAAA,CAAS,iBAAY,QAAZ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAsB,SAAS,CAAC,CAAA,CAAA;AAM7C,EAAM,MAAA,kBAAA,GAAqB,CAAC,IAAA,EAAc,MAAmB,KAAA;AAC3D,IAAA,eAAA,CAAgB,CAAC,UAA8B,MAAA;AAAA,MAC7C,GAAG,UAAA;AAAA,MACH,CAAC,IAAI,GAAG,MAAA;AAAA,KACR,CAAA,CAAA,CAAA;AAAA,GACJ,CAAA;AAEA,EAAM,MAAA,UAAA,GAAa,CAAC,MAAqB,KAAA;AACvC,IAAA,IAAI,OAAO,SAAW,EAAA;AACpB,MAAO,OAAA,WAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAO,MAAQ,EAAA;AACjB,MAAO,OAAA,QAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAO,QAAU,EAAA;AACnB,MAAO,OAAA,UAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAO,qBAAuB,EAAA;AAChC,MAAO,OAAA,uBAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAO,QAAU,EAAA;AACnB,MAAO,OAAA,UAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAO,oBAAsB,EAAA;AAC/B,MAAO,OAAA,yBAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAO,SAAW,EAAA;AACpB,MAAO,OAAA,YAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAO,SAAW,EAAA;AACpB,MAAO,OAAA,YAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAO,MAAQ,EAAA;AACjB,MAAO,OAAA,QAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAO,WAAa,EAAA;AACtB,MAAO,OAAA,cAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAO,EAAI,EAAA;AACb,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAO,UAAY,EAAA;AACrB,MAAO,OAAA,aAAA,CAAA;AAAA,KACT;AACA,IAAO,OAAA,SAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAM,MAAA,kBAAA,GAAqB,CAAC,SAAA,EAAwB,UAAuB,KAAA;AAhG7E,IAAAF,IAAAA,GAAAA,CAAAA;AAiGI,IAAOA,OAAAA,CAAAA,GAAAA,GAAA,UAAU,YAAV,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAwB,MAAO,CAAA,CAAC,WAA0B,KAAA,WAAA,CAAY,IAAO,GAAA,UAAA,CAAA,CAAA;AAAA,GACtF,CAAA;AAEA,EACE,uBAAAG,cAAA,CAAA,aAAA,CAAC,IACC,EAAA,IAAA,kBAAAA,cAAA,CAAA,aAAA,CAAC,WACC,EAAA,IAAA,kBAAAA,cAAA,CAAA,aAAA,CAAC,cAAW,OAAQ,EAAA,IAAA,EAAK,YAAY,EAAA,IAAA,EAAA,EAAC,SAAO,CAAA,+CAC5C,IACE,EAAA,IAAA,EAAA,WAAA,IAAe,WAAY,CAAA,IAAA,IAAQ,WAAY,CAAA,IAAA,CAAK,WAAW,WAAY,CAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,CAAO,MAAA,KAAA;AAzG9G,IAAAH,IAAAA,GAAAA,EAAAC,KAAAC,GAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AA0GY,IAAA,uBAAAC,cAAA,CAAA,aAAA,CAAC,YAAS,GAAK,EAAA,MAAA,CAAO,IACnB,EAAA,EAAA,MAAA,CAAO,sBACPA,cAAA,CAAA,aAAA,CAAA,YAAA,EAAA,EAAa,OAAS,EAAA,CAAA,MAAA,EAAS,WAAW,MAAM,CAAC,CAAI,CAAA,EAAA,CAAA,+CACrD,IACEF,EAAAA,IAAAA,EAAAA,CAAAA,GAAAA,GAAAA,CAAAD,GAAA,GAAA,WAAA,CAAY,SAAZ,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAAA,CAAkB,UAAlB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAC,IAA8B,MAAO,CAAA,CAAC,SAA2B,KAAA,kBAAA,CAAmB,WAAW,MAAO,CAAA,IAAI,CAAG,CAAA,CAAA,GAAA,CAAI,CAAC,SAAwB,KAAA;AA9G3J,MAAAD,IAAAA,GAAAA,CAAAA;AA+GkB,MAAA,uBAAAG,cAAA,CAAA,aAAA,CAAC,IAAG,EAAA,EAAA,GAAA,EAAK,SAAU,CAAA,IAAA,EAAA,EAAM,eACX,SAAU,CAAA,IAAA,EAAA,CACrBH,GAAA,GAAA,SAAA,CAAU,YAAV,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,GAAwB,CAAA,MAAA,CAAO,CAAC,WAAgB,KAAA,WAAA,CAAY,IAAS,KAAA,MAAA,CAAO,IAAM,CAAA,CAAA,GAAA,CAAI,CAAC,WAAA,kDACrF,YAAa,EAAA,EAAA,GAAA,EAAK,WAAY,CAAA,SAAA,EAAW,OAAS,EAAA,CAAA,MAAA,EAAS,WAAY,CAAA,SAAS,IAAI,CAEzF,CAAA,CAAA,CAAA;AAAA,KAAA,CAEJ,CACA,kBAAAG,cAAA,CAAA,aAAA,CAAC,YAAa,EAAA,EAAA,OAAA,EAAS,WAAW,SAAWD,EAAAA,CAAAA,GAAAA,GAAA,YAAa,CAAA,MAAA,CAAO,IAAI,CAAA,KAAxB,IAAAA,GAAAA,GAAAA,GAA6B,WAAW,CACrF,kBAAAC,cAAA,CAAA,aAAA;AAAA,MAAC,MAAA;AAAA,MAAA;AAAA,QACC,KAAO,EAAA,CAAA,EAAA,GAAA,YAAA,CAAa,MAAO,CAAA,IAAI,MAAxB,IAA6B,GAAA,EAAA,GAAA,SAAA;AAAA,QACpC,MAAQ,EAAA,CAAA,EAAA,GAAA,YAAA,CAAa,MAAO,CAAA,IAAI,MAAxB,IAA6B,GAAA,EAAA,GAAA,SAAA;AAAA,OAAA;AAAA,KACzC,CAAA,CAAA;AAAA,GACD,CACH,CACF,CACF,CAAA,CAAA;AAEJ,CAAA;;ACjHA,MAAM,wBAA2D,GAAA,CAAC,EAAE,WAAA,EAAkB,KAAA;AAEpF,EAAA,MAAM,UAAU,OAAQ,EAAA,CAAA;AACxB,EAAA,MAAM,CAAC,IAAM,EAAA,OAAO,CAAI,GAAA,QAAA,CAAkB,EAAE,CAAA,CAAA;AAE5C,EAAA,SAAA,CAAU,MAAM;AArBlB,IAAA,IAAA,EAAA,CAAA;AAsBI,IAAA,MAAM,UAAmB,EAAC,CAAA;AAC1B,IAAM,MAAA,IAAA,GAAA,CAAO,EAAa,GAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAA,QAAA,KAAb,IAAuB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA;AACpC,IAAA,IAAI,IAAM,EAAA;AACR,MAAQ,OAAA,CAAA,MAAA,CAAO,CAAC,GAAY,KAAA;AAzBlC,QAAA,IAAAH,GAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AA0BQ,QAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAAA,GAAA,GAAA,GAAA,CAAI,QAAJ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,GAAc,CAAA,IAAA,KAAd,IAAoB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAA,CAAW,IAAS,CAAA,MAAA,CAAA,EAAA,GAAA,GAAA,CAAI,QAAJ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAc,KAAK,QAAS,CAAA,OAAA,CAAA,CAAA,CAAA;AAAA,OAAQ,CAAA,CAC3E,OAAQ,CAAA,CAAC,GAAe,KAAA;AACzB,QAAA,OAAA,CAAQ,KAAK,GAAG,CAAA,CAAA;AAAA,OACjB,CAAA,CAAA;AACC,MAAA,OAAA,CAAQ,OAAO,CAAA,CAAA;AAAA,KACnB;AAAA,GACF,EAAG,CAAC,WAAW,CAAC,CAAA,CAAA;AAEhB,EAAM,MAAA,SAAA,GAAY,CAAC,KAA4B,KAAA;AAC7C,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAEA,IAAI,IAAA,KAAA,CAAM,QAAS,CAAA,SAAS,CAAG,EAAA;AAC7B,MAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,KAAA,CAAM,UAAU,CAAA,CAAA;AACpC,MAAO,OAAA,KAAA,CAAM,CAAC,CAAI,GAAA,UAAA,GAAa,MAAM,CAAC,CAAA,CAAE,SAAU,CAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,KACxD;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAM,MAAA,SAAA,GAAY,CAAC,GAAe,KAAA;AA9CpC,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AA+CI,IAAI,IAAA,CAAA,EAAA,GAAA,GAAA,CAAI,MAAJ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAY,SAAW,EAAA;AACzB,MAAO,OAAA,WAAA,CAAA;AAAA,KACT;AACA,IAAI,IAAA,CAAA,EAAA,GAAA,GAAA,CAAI,MAAJ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAY,MAAQ,EAAA;AACtB,MAAO,OAAA,QAAA,CAAA;AAAA,KACT;AACA,IAAI,IAAA,CAAA,EAAA,GAAA,GAAA,CAAI,MAAJ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAY,MAAQ,EAAA;AACtB,MAAO,OAAA,SAAA,CAAA;AAAA,KACT;AACA,IAAO,OAAA,SAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAA,oDACGI,MACC,EAAA,IAAA,kBAAAD,cAAA,CAAA,aAAA,CAACE,qCACEF,cAAA,CAAA,aAAA,CAAAG,YAAA,EAAA,EAAW,SAAQ,IAAK,EAAA,SAAA,EAAU,SAAM,MAEzC,CAAA,+CACCC,MACE,EAAA,IAAA,EAAA,IAAA,IACC,KAAK,GAAI,CAAA,CAAC,KAAK,KAAO,KAAA;AAnElC,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAoEc,IAAA,uBAAAJ,cAAA,CAAA,aAAA,CAACK,cAAS,GAAK,EAAA,KAAA,EAAA,EAAA,CACZ,EAAI,GAAA,GAAA,CAAA,QAAA,KAAJ,mBAAc,IACd,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAA,CAAI,IAAJ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAU,aAAV,IAAoB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,KAApB,mBAA0B,UAAW,CAAA,GAAA,CAAI,CAAC,SAAW,EAAA,GAAA,qBACnDL,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAI,KAAK,GACR,EAAA,kBAAAA,cAAA,CAAA,aAAA,CAACG,YACC,EAAA,IAAA,kBAAAH,cAAA,CAAA,aAAA,CAAC,gBAAO,OAAK,CAAA,EAAS,GAAE,EAAA,SAAA,CAAU,IACpC,CACA,kBAAAA,cAAA,CAAA,aAAA,CAACG,oCACEH,cAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAO,QAAM,CAAS,EAAA,GAAA,EAAE,SAAU,CAAA,SAAA,CAAU,KAAK,CACpD,CAAA,kBACCA,cAAA,CAAA,aAAA,CAAAG,YAAA,EAAA,IAAA,+CACE,QAAO,EAAA,IAAA,EAAA,UAAQ,CAAS,EAAA,GAAA,EAAE,UAAU,OACvC,CAAA,+CACCA,YACC,EAAA,IAAA,kBAAAH,cAAA,CAAA,aAAA,CAAC,gBAAO,OAAK,CAAA,EAAS,GAAE,EAAA,SAAA,CAAU,IACpC,CACF,CAAA,CAAA,+CAEDG,YAAW,EAAA,IAAA,EAAA,SAAA,EACF,qBACPH,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA,EAAO,KAAO,EAAA,SAAA,CAAU,GAAG,CAAG,EAAA,MAAA,EAAQ,UAAU,GAAG,CAAA,EAAG,CACzD,CACF,CAAA,CAAA;AAAA,GACD,CACL,CACF,CACF,CAAA,CAAA;AAEJ,CAAA;;ACnFA,MAAM,kCAAqE,GAAA,CAAC,EAAE,WAAA,EAAkB,KAAA;AAE9F,EAAA,MAAM,UAAU,OAAQ,EAAA,CAAA;AACxB,EAAA,MAAM,CAAC,IAAM,EAAA,OAAO,CAAI,GAAA,QAAA,CAAkB,EAAE,CAAA,CAAA;AAE5C,EAAA,SAAA,CAAU,MAAM;AACd,IAAI,IAAA,WAAA,IAAe,YAAY,QAAU,EAAA;AACvC,MAAQ,OAAA,CAAA,OAAA,CAAQ,MAAO,CAAA,CAAC,GAAY,KAAA;AApB1C,QAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAoB6C,QAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAA,CAAI,aAAJ,IAAc,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,KAAd,mBAAuB,wBAA8B,CAAA,OAAA,CAAA,EAAA,GAAA,WAAA,CAAY,aAAZ,IAAsB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,CAAA;AAAA,OAAI,CAAC,CAAA,CAAA;AAAA,KACzH;AAAA,GACF,EAAG,CAAC,WAAW,CAAC,CAAA,CAAA;AAEhB,EAAM,MAAA,SAAA,GAAY,CAAC,KAA8B,KAAA;AAC/C,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AACA,IAAI,IAAA,KAAA,CAAM,QAAS,CAAA,SAAS,CAAG,EAAA;AAC7B,MAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,KAAA,CAAM,UAAU,CAAA,CAAA;AACpC,MAAO,OAAA,KAAA,CAAM,CAAC,CAAI,GAAA,UAAA,GAAa,MAAM,CAAC,CAAA,CAAE,SAAU,CAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,KACxD;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAM,MAAA,mBAAA,GAAsB,CAACM,KAAAA,EAAe,iBAA8B,KAAA;AACxE,IAAM,MAAA,MAAA,GAASA,KAAK,CAAA,OAAA,CAAQ,CAAE,CAAA,KAAA;AApClC,MAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAoCqC,MAAE,OAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,CAAA,MAAA,KAAF,IAAU,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,qBAAA,KAAV,IAAiC,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,CAAO,CAAK,CAAA,KAAA,CAAA,CAAE,IAAS,KAAA,iBAAA,CAAA,CAAmB,GAAI,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,KAAA,CAAA,CAAA;AAAA,KAAM,CAAA,CAAA;AAC7H,IAAA,IAAI,MAAO,CAAA,IAAA,CAAK,CAAK,CAAA,KAAA,CAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,CAAG,OAAO,CAAG,EAAA;AAChC,MAAO,OAAA,SAAA,CAAA;AAAA,KACT;AACA,IAAI,IAAA,MAAA,CAAO,MAAM,CAAE,CAAA,KAAA;AAxCvB,MAAA,IAAA,EAAA,CAAA;AAwC0B,MAAG,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,CAAA,UAAA,KAAH,mBAAe,MAAW,MAAA,WAAA,CAAA;AAAA,KAAW,CAAG,EAAA;AAC5D,MAAO,OAAA,WAAA,CAAA;AAAA,KACT;AACA,IAAI,IAAA,MAAA,CAAO,KAAK,CAAE,CAAA,KAAA;AA3CtB,MAAA,IAAA,EAAA,CAAA;AA2CyB,MAAG,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,CAAA,UAAA,KAAH,mBAAe,MAAW,MAAA,QAAA,CAAA;AAAA,KAAQ,CAAG,EAAA;AACxD,MAAO,OAAA,QAAA,CAAA;AAAA,KACT;AACA,IAAO,OAAA,SAAA,CAAA;AAAA,GACT,CAAA;AAEA,EACE,uBAAAN,cAAA,CAAA,aAAA,CAACC,8BACED,cAAA,CAAA,aAAA,CAAAE,aAAA,EAAA,IAAA,+CACEC,YAAW,EAAA,EAAA,OAAA,EAAQ,IAAK,EAAA,SAAA,EAAU,KAAM,EAAA,EAAA,iBAEzC,mBACCH,cAAA,CAAA,aAAA,CAAAI,MAAA,EAAA,IAAA,EACE,WAAe,IAAA,WAAA,CAAY,IAAQ,IAAA,WAAA,CAAY,KAAK,cAAkB,IAAA,WAAA,CAAY,IAAK,CAAA,cAAA,CAAe,GAAI,CAAA,CAAC,WAAwB,KAClI,qBAAAJ,cAAA,CAAA,aAAA,CAACK,UAAS,EAAA,EAAA,GAAA,EAAK,KACb,EAAA,kBAAAL,cAAA,CAAA,aAAA,CAACG,gBAAW,OAAQ,EAAA,IAAA,EAAA,EAAM,SAAU,CAAA,IAAK,CACzC,kBAAAH,cAAA,CAAA,aAAA,CAAC,6BACEA,cAAA,CAAA,aAAA,CAAAG,YAAA,EAAA,IAAA,kBAAYH,cAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAO,OAAK,CAAA,EAAS,KAAE,SAAU,CAAA,IAAK,CACnD,kBAAAA,cAAA,CAAA,aAAA,CAACG,YAAW,EAAA,IAAA,kBAAAH,cAAA,CAAA,aAAA,CAAC,gBAAO,QAAM,CAAA,EAAS,KAAE,SAAU,CAAA,SAAA,CAAU,KAAK,CAAE,CAAA,kBAC/DA,cAAA,CAAA,aAAA,CAAAG,YAAA,EAAA,IAAA,kBAAYH,cAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAO,UAAQ,CAAS,EAAA,GAAA,EAAE,SAAU,CAAA,OAAQ,CACzD,kBAAAA,cAAA,CAAA,aAAA,CAACG,oCAAYH,cAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAO,OAAK,CAAA,EAAS,GAAE,EAAA,SAAA,CAAU,IAAK,CACrD,CAAA,kBACCA,cAAA,CAAA,aAAA,CAAAG,YAAA,EAAA,IAAA,EAAW,SACF,EAAA,GAAA,+CACP,MAAO,EAAA,EAAA,KAAA,EAAO,mBAAoB,CAAA,IAAA,EAAM,SAAU,CAAA,IAAI,GAAG,MAAQ,EAAA,mBAAA,CAAoB,IAAM,EAAA,SAAA,CAAU,IAAI,CAAA,EAAG,CAC/G,CACF,CACD,CACH,CACF,CACF,CAAA,CAAA;AAEJ,CAAA;;ACtEA,MAAM,0BAA6D,GAAA,CAAC,EAAE,WAAA,EAAkB,KAAA;AALxF,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAOE,EAAA,MAAM,CAAC,MAAA,EAAQ,SAAS,CAAA,GAAI,QAAoB,CAAA;AAAA,IAC9C,cAAgB,EAAA,IAAA;AAAA,IAChB,aAAe,EAAA,IAAA;AAAA,IACf,YAAc,EAAA,IAAA;AAAA,GACf,CAAA,CAAA;AAED,EAAA,SAAA,CAAU,MAAM;AAblB,IAAA,IAAAN,KAAAC,GAAAC,EAAAA,GAAAA,CAAAA;AAcI,IAAI,IAAA,WAAA,IAAe,WAAY,CAAA,IAAA,IAAQ,WAAY,CAAA,IAAA,CAAK,cAAc,WAAY,CAAA,IAAA,CAAK,UAAW,CAAA,MAAA,GAAS,CAAG,EAAA;AAC5G,MAAA,MAAM,SAAY,GAAA,WAAA,CAAY,IAAK,CAAA,UAAA,CAAW,CAAC,CAAA,CAAA;AAC/C,MAAU,SAAA,CAAA;AAAA,QACR,cAAA,EAAgB,SAAU,CAAA,cAAA,GAAA,CAAA,CAAiBF,GAAA,GAAA,SAAA,CAAU,eAAe,OAAzB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,GAAkC,CAAA,IAAA,KAAQ,IAAO,GAAA,IAAA;AAAA,QAC5F,aAAA,EAAe,SAAU,CAAA,aAAA,GAAA,CAAA,CAAgBC,GAAA,GAAA,SAAA,CAAU,cAAc,OAAxB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,GAAiC,CAAA,IAAA,KAAQ,IAAO,GAAA,IAAA;AAAA,QACzF,YAAA,EAAc,SAAU,CAAA,YAAA,GAAA,CAAA,CAAeC,GAAA,GAAA,SAAA,CAAU,aAAa,OAAvB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,GAAgC,CAAA,IAAA,KAAQ,IAAO,GAAA,IAAA;AAAA,OACvF,CAAA,CAAA;AAAA,KACH;AAAA,GACF,EAAG,CAAC,WAAW,CAAC,CAAA,CAAA;AAEhB,EACE,uBAAAC,cAAA,CAAA,aAAA,CAACC,8BACED,cAAA,CAAA,aAAA,CAAAE,aAAA,EAAA,IAAA,+CACEC,YAAW,EAAA,EAAA,OAAA,EAAQ,IAAK,EAAA,SAAA,EAAU,KAAM,EAAA,EAAA,QAEzC,mBACCH,cAAA,CAAA,aAAA,CAAAG,YAAA,EAAA,EAAW,WAAU,KACpB,EAAA,kBAAAH,cAAA,CAAA,aAAA,CAAC,2BAAGA,cAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAO,gBAAc,CAAA,EAAS,GAAC,kBAAAA,cAAA,CAAA,aAAA,CAAC,UAAO,KAAO,EAAA,MAAA,CAAO,gBAAgB,KAAO,EAAA,MAAA,EAAQ,OAAO,YAAgB,IAAA,CAAA,CAAA,EAAA,GAAA,WAAA,CAAY,MAAZ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAoB,iBAAsB,OAAA,CAAA,EAAA,GAAA,WAAA,CAAY,WAAZ,IAAoB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAA,CAAA,GAAW,cAAc,QAAS,EAAA,CAAE,mBAChNA,cAAA,CAAA,aAAA,CAAA,GAAA,EAAA,IAAA,kBAAGA,cAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAO,kBAAgB,CAAA,EAAS,qBAAEA,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA,EAAO,OAAO,MAAO,CAAA,cAAA,IAAkB,OAAO,MAAQ,EAAA,MAAA,CAAO,cAAkB,IAAA,CAAA,CAAA,EAAA,GAAA,WAAA,CAAY,MAAZ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAoB,yBAAsB,EAAY,GAAA,WAAA,CAAA,MAAA,KAAZ,mBAAoB,QAAW,CAAA,GAAA,WAAA,GAAc,UAAS,CAAE,CAAA,kBACtNA,cAAA,CAAA,aAAA,CAAA,GAAA,EAAA,IAAA,kBAAGA,cAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAAO,iBAAe,CAAS,EAAA,GAAA,+CAAE,MAAO,EAAA,EAAA,KAAA,EAAO,OAAO,aAAiB,IAAA,KAAA,EAAO,MAAQ,EAAA,MAAA,CAAO,aAAiB,IAAA,CAAA,CAAA,EAAA,GAAA,WAAA,CAAY,WAAZ,IAAoB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,iBAAA,OAAA,CAAsB,EAAY,GAAA,WAAA,CAAA,MAAA,KAAZ,IAAoB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAA,CAAA,GAAW,cAAc,QAAS,EAAA,CAAE,CACtN,CACF,CACF,CAAA,CAAA;AAEJ,CAAA;;AC9BA,MAAM,4BAA+D,GAAA,CAAC,EAAE,WAAA,EAAkB,KAAA;AAGxF,EACE,uBAAA,KAAA,CAAA,aAAA,CAACC,MACC,EAAA,IAAA,kBAAA,KAAA,CAAA,aAAA,CAACC,aACC,EAAA,IAAA,kBAAA,KAAA,CAAA,aAAA,CAACC,gBAAW,OAAQ,EAAA,IAAA,EAAK,YAAY,EAAA,IAAA,EAAA,EAAC,eAAa,CAAA,sCAClD,KAAI,EAAA,EAAA,KAAA,EAAO,EAAE,OAAA,EAAS,MAAQ,EAAA,aAAA,EAAe,UAAU,MAAQ,EAAA,MAAA,EAE9D,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,KAAI,EAAA,EAAA,KAAA,EAAO,EAAE,OAAS,EAAA,MAAA,EAAQ,aAAe,EAAA,KAAA,EAAO,IAAM,EAAA,GAAA,EAAK,QAAQ,KAAM,EAAA,EAAA,kBAC3E,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAI,KAAO,EAAA,EAAE,MAAM,GAAK,EAAA,OAAA,EAAS,KAAM,EAAA,EAAA,kBACrC,KAAA,CAAA,aAAA,CAAA,0BAAA,EAAA,EAA2B,WAA0B,EAAA,CACxD,CACA,kBAAA,KAAA,CAAA,aAAA,CAAC,KAAI,EAAA,EAAA,KAAA,EAAO,EAAE,IAAA,EAAM,KAAK,OAAS,EAAA,KAAA,EAChC,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,2BAA4B,EAAA,EAAA,WAAA,EAA0B,CACzD,CACF,CAAA,kBAEC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAI,KAAO,EAAA,EAAE,SAAS,MAAQ,EAAA,aAAA,EAAe,KAAO,EAAA,IAAA,EAAM,GAAK,EAAA,MAAA,EAAQ,OACtE,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,KAAI,EAAA,EAAA,KAAA,EAAO,EAAE,IAAA,EAAM,KAAK,OAAS,EAAA,KAAA,EAAO,MAAQ,EAAA,MAAA,EAC/C,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,sCAAmC,WAA0B,EAAA,CAChE,CACA,kBAAA,KAAA,CAAA,aAAA,CAAC,KAAI,EAAA,EAAA,KAAA,EAAO,EAAE,IAAM,EAAA,GAAA,EAAK,OAAS,EAAA,KAAA,EAChC,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,wBAAyB,EAAA,EAAA,WAAA,EAA0B,CACtD,CACF,CACF,CACF,CACF,CAAA,CAAA;AAEJ,CAAA;;ACnCO,MAAM,6BAAgE,GAAA,CAAC,EAAE,WAAA,EAAkB,KAAA;AAE9F,EAAA,SAAA,CAAU,MAAM;AACd,IAAQ,OAAA,CAAA,GAAA,CAAI,+CAA+C,WAAW,CAAA,CAAA;AAAA,GACxE,EAAG,CAAC,WAAW,CAAC,CAAA,CAAA;AAEhB,EAAA,uBAEAH,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,CAAA,CAAA;AAEJ,CAAA;;ACPO,SAAS,4BAA4B,WAAkD,EAAA;AAN9F,EAAA,IAAA,EAAA,CAAA;AAOE,EAAA,MAAM,UAAkC,EAAC,CAAA;AAEzC,EAAI,IAAA,CAAA,CAAA,EAAA,GAAA,WAAA,CAAY,SAAZ,IAAkB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAA,KAAc,YAAY,IAAK,CAAA,UAAA,CAAW,SAAS,CAAG,EAAA;AAC1E,IAAA,WAAA,CAAY,IAAK,CAAA,UAAA,CAAW,OAAQ,CAAA,CAAC,SAA2B,KAAA;AAC9D,MAAA,IAAI,UAAU,GAAK,EAAA;AACjB,QAAU,SAAA,CAAA,GAAA,CAAI,OAAQ,CAAA,CAAC,MAAW,KAAA;AAChC,UAAI,IAAA,MAAA,CAAO,IAAQ,IAAA,MAAA,CAAO,KAAO,EAAA;AAC/B,YAAQ,OAAA,CAAA,MAAA,CAAO,IAAI,CAAA,GAAI,MAAO,CAAA,KAAA,CAAA;AAAA,WAChC;AAAA,SACD,CAAA,CAAA;AAAA,OACH;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAEA,EAAO,OAAA,OAAA,CAAA;AACT,CAAA;AAoFO,SAAS,sBAAsB,WAAoC,EAAA;AA1G1E,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA2GE,EAAA,MAAM,iBAA2B,EAAC,CAAA;AAEhC,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,WAAA,CAAY,SAAZ,IAAkB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,KAAlB,IAA2B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,CAAQ,CAAC,MAAW,KAAA;AAC7C,IAAA,IAAI,MAAO,CAAA,MAAA,IAAU,MAAO,CAAA,MAAA,CAAO,UAAY,EAAA;AAC7C,MAAe,cAAA,CAAA,IAAA,CAAK,MAAO,CAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AAAA,KAC9C;AAAA,GACF,CAAA,CAAA;AAEF,EAAO,OAAA,cAAA,CAAA;AACT,CAAA;AAEO,SAAS,yBAAyB,WAAoC,EAAA;AAtH7E,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAuHE,EAAA,MAAM,oBAA8B,EAAC,CAAA;AACnC,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,WAAA,CAAY,SAAZ,IAAkB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,KAAlB,IAA2B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,CAAQ,CAAC,MAAW,KAAA;AAC7C,IAAA,IAAI,MAAO,CAAA,SAAA,IAAa,MAAO,CAAA,SAAA,CAAU,IAAM,EAAA;AAC7C,MAAkB,iBAAA,CAAA,IAAA,CAAK,MAAO,CAAA,SAAA,CAAU,IAAI,CAAA,CAAA;AAAA,KAC9C;AAAA,GACF,CAAA,CAAA;AAEF,EAAO,OAAA,iBAAA,CAAA;AACT;;ACpHO,MAAM,mCAAsE,GAAA,CAAC,EAAE,WAAA,EAAkB,KAAA;AAXxG,EAAA,IAAA,EAAA,CAAA;AAiBE,EAAA,MAAM,CAAC,OAAS,EAAA,UAAU,CAAI,GAAA,QAAA,CAAoC,EAAE,CAAA,CAAA;AACpE,EAAA,MAAM,CAAC,OAAS,EAAA,UAAU,CAAI,GAAA,QAAA,CAAmB,EAAE,CAAA,CAAA;AACnD,EAAA,MAAM,CAAC,UAAY,EAAA,aAAa,CAAI,GAAA,QAAA,CAAmB,EAAE,CAAA,CAAA;AAEzD,EAAA,MAAM,CAAC,YAAc,EAAA,eAAe,CAAI,GAAA,QAAA,CAAsB,EAAE,CAAA,CAAA;AAEhE,EAAA,SAAA,CAAU,MAAM;AACd,IAAO,MAAA,CAAA,OAAA,CAAQ,OAAO,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,CAAC,CAAM,KAAA;AAC5C,MAAA,sBAAA,CAAuB,iBAAiB,GAAG,CAAC,CAAE,CAAA,IAAA,CAAK,CAAC,WAAgB,KAAA;AAClE,QAAA,eAAA,CAAgB,CAAqB,gBAAA,MAAA;AAAA,UACnC,GAAG,gBAAA;AAAA,UACH,CAAC,GAAG,GAAG,WAAA;AAAA,SACP,CAAA,CAAA,CAAA;AAAA,OACH,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAAA,GACH,EAAG,CAAC,OAAO,CAAC,CAAA,CAAA;AAEZ,EAAA,SAAA,CAAU,MAAM;AACd,IAAI,IAAA,WAAA,IAAe,YAAY,IAAM,EAAA;AACnC,MAAW,UAAA,CAAA,2BAAA,CAA4B,WAAW,CAAC,CAAA,CAAA;AACnD,MAAW,UAAA,CAAA,qBAAA,CAAsB,WAAW,CAAC,CAAA,CAAA;AAC7C,MAAc,aAAA,CAAA,wBAAA,CAAyB,WAAW,CAAC,CAAA,CAAA;AAAA,KACrD;AAAA,GACF,EAAG,CAAC,WAAW,CAAC,CAAA,CAAA;AAGhB,EAAA,SAAS,gBAAgB,GAAqB,EAAA;AAC5C,IAAA,OAAO,gBAAgB,YAAa,CAAA,GAAG,CAAI,GAAA,YAAA,CAAa,GAAG,CAAI,GAAA,GAAA,CAAA;AAAA,GACjE;AAEA,EAAA,SAAS,iBAAiB,MAAwB,EAAA;AAChD,IAAA,OAAO,MAAO,CAAA,WAAA,EAAc,CAAA,OAAA,CAAQ,MAAM,GAAG,CAAA,CAAA;AAAA,GAC/C;AASA,EAAA,eAAe,uBAAuB,YAAuC,EAAA;AAK3E,IAAM,MAAA,QAAA,GAAW,MAAM,KAAA,CAAM,sCAAsC,CAAA,CAAA;AACnE,IAAM,MAAA,IAAA,GAAO,MAAM,QAAA,CAAS,IAAK,EAAA,CAAA;AAGjC,IAAM,MAAA,MAAA,GAAS,IAAI,SAAU,EAAA,CAAA;AAC7B,IAAA,MAAM,GAAM,GAAA,MAAA,CAAO,eAAgB,CAAA,IAAA,EAAM,WAAW,CAAA,CAAA;AAGpD,IAAM,MAAA,MAAA,GAAS,GAAI,CAAA,gBAAA,CAAiB,OAAO,CAAA,CAAA;AAE3C,IAAA,IAAI,IAAO,GAAA,EAAA,CAAA;AAGX,IAAO,MAAA,CAAA,OAAA,CAAQ,CAAC,KAAU,KAAA;AAExB,MAAA,KAAA,CAAM,gBAAiB,CAAA,UAAU,CAAE,CAAA,OAAA,CAAQ,CAAC,GAAQ,KAAA;AA9E1D,QAAA,IAAAH,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAgFQ,QAAM,MAAA,OAAA,GAAU,GAAI,CAAA,aAAA,CAAc,gBAAgB,CAAA,CAAA;AAClD,QAAM,MAAA,eAAA,GAAkB,GAAI,CAAA,aAAA,CAAc,iBAAiB,CAAA,CAAA;AAC3D,QAAM,MAAA,QAAA,GAAW,GAAI,CAAA,aAAA,CAAc,iBAAiB,CAAA,CAAA;AACpD,QAAM,MAAA,WAAA,GAAc,GAAI,CAAA,aAAA,CAAc,iBAAiB,CAAA,CAAA;AAEvD,QAAI,IAAA,OAAA,IAAW,qBAAmBA,GAAA,GAAA,OAAA,CAAQ,gBAAR,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAAA,CAAqB,SAAS,YAAe,CAAA,CAAA,EAAA;AAE7E,UAAA,IAAA,GAAA,CAAA,CAAO,EAAgB,GAAA,eAAA,CAAA,WAAA,KAAhB,IAA6B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAA,CAAM,IACrC,CAAA,CAAA,MAAA,CAAO,CAAC,IAAA,KAAS,CAAC,IAAA,CAAK,UAAW,CAAA,YAAY,GAC9C,MAAO,CAAA,CAAC,IAAS,KAAA,CAAC,IAAK,CAAA,UAAA,CAAW,sBAAsB,CAAA,CAAA,CACxD,MAAO,CAAA,CAAC,IAAS,KAAA,CAAC,IAAK,CAAA,UAAA,CAAW,WAAW,CAAA,CAAA,CAC7C,KAAK,IAAQ,CAAA,IAAA,KAAA,CAAA;AACd,UAAA,eAAA,IAAA,CAAkB,0CAAU,WAAV,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAuB,UAAS,KAAQ,IAAA,CAAA,EAAA,GAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAa,gBAAb,IAA0B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA,SAE1F;AAAA,OACD,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AACD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAEA,EACE,uBAAA,KAAA,CAAA,aAAA,CAACI,8BACE,KAAA,CAAA,aAAA,CAAAC,aAAA,EAAA,IAAA,sCACEC,YAAW,EAAA,EAAA,OAAA,EAAQ,IAAK,EAAA,YAAA,EAAY,IAAC,EAAA,EAAA,eAAa,GAClD,WACC,oBAAA,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,kBACG,KAAA,CAAA,aAAA,CAAAA,YAAA,EAAA,EAAW,SAAU,EAAA,GAAA,EAAA,EAAI,WAAO,EAAY,GAAA,WAAA,CAAA,QAAA,KAAZ,IAAsB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAK,CAC5D,kBAAA,KAAA,CAAA,aAAA,CAACA,gBAAW,SAAU,EAAA,GAAA,EAAA,EAAI,wBAAsB,CAAA,kBAC/C,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACE,OAAO,OAAQ,CAAA,OAAO,CAAE,CAAA,GAAA,CAAI,CAAC,CAAC,KAAK,KAAK,CAAA,qBACtC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,EAAG,GACF,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,WAAQ,KAAO,EAAA,eAAA,CAAgB,GAAG,CAAA,EAAA,kBAChC,KAAA,CAAA,aAAA,CAAAA,YAAA,EAAA,EAAW,WAAU,GAAI,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,QAAQ,EAAA,IAAA,EAAA,GAAA,EAAI,GAAC,CAAA,EAAU,KAAM,CAC1D,CACF,CACD,CACH,CACA,kBAAA,KAAA,CAAA,aAAA,CAACA,gBAAW,SAAU,EAAA,GAAA,EAAA,EAAI,UAAQ,CAAA,kBACjC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACE,QAAQ,GAAI,CAAA,CAAC,MACZ,qBAAA,KAAA,CAAA,aAAA,CAAC,IAAG,EAAA,EAAA,GAAA,EAAK,UACN,MACH,CACD,CACH,CAAA,kBACC,KAAA,CAAA,aAAA,CAAAA,YAAA,EAAA,EAAW,WAAU,GAAI,EAAA,EAAA,cAAY,CACtC,kBAAA,KAAA,CAAA,aAAA,CAAC,IACE,EAAA,IAAA,EAAA,UAAA,CAAW,IAAI,CAAC,SAAA,qBACd,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,EAAG,GAAK,EAAA,SAAA,EAAA,EAAW,WAEpB,CACD,CACH,CACF,CAEJ,CACF,CAAA,CAAA;AAEJ,CAAA;;ACtIO,MAAM,6BAAgE,GAAA,CAAC,EAAE,WAAA,EAAkB,KAAA;AAE9F,EAAA,SAAA,CAAU,MAAM;AACd,IAAQ,OAAA,CAAA,GAAA,CAAI,+CAA+C,WAAW,CAAA,CAAA;AAAA,GACxE,EAAG,CAAC,WAAW,CAAC,CAAA,CAAA;AAEhB,EAAA,uBAEAH,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,CAAA,CAAA;AAEJ,CAAA;;ACMA,MAAM,cAAc,MAAM;AACxB,EAAA,MAAM,gBAAmB,GAAA;AAAA,IACvB,YAAa,CAAA,WAAA;AAAA,IACb,YAAa,CAAA,OAAA;AAAA,IACb,YAAa,CAAA,UAAA;AAAA,IACb,YAAa,CAAA,sBAAA;AAAA,GACf,CAAA;AAEA,EAAM,MAAA,uBAAA,GAA0B,sBAAsB,gBAAgB,CAAA,CAAA;AACtE,EAAA,MAAM,CAAC,WAAA,EAAa,cAAc,CAAA,GAAI,QAAsB,EAAA,CAAA;AAC5D,EAAA,MAAM,CAAC,YAAA,EAAc,eAAe,CAAA,GAAI,SAAiB,CAAC,CAAA,CAAA;AAE1D,EAAA,MAAM,sBAAsB,WAAY,EAAA,CAAA;AAExC,EAAM,MAAA,eAAA,GAAkB,CAAC,CAAA,EAAyB,QAAqB,KAAA;AACrE,IAAA,eAAA,CAAgB,QAAQ,CAAA,CAAA;AAAA,GAC1B,CAAA;AAEA,EAAA,SAAA,CAAU,MAAM;AAtClB,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAuCI,IAAA,IAAI,CAAC,uBAAyB,EAAA;AAC5B,MAAA,OAAA;AAAA,KACF;AACA,IAAA,MAAM,gBAAgB,mBAAoB,CAAA,QAAA,CAAS,KAAM,CAAA,GAAG,EAAE,CAAC,CAAA,CAAA;AAC/D,IAAA,MAAM,YAA0C,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,uBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,uBAAA,CAAyB,kBAAzB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA6C,gBAA7C,IAA0D,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA;AAC1G,IAAA,MAAM,WAA+B,GAAA,CAAA,YAAA,GAAe,YAAgC,GAAA,EACnF,EAAA,MAAA,CAAO,CAAC,IAAA,KAAuB,IAAQ,IAAA,IAAA,CAAK,QAAY,IAAA,IAAA,CAAK,QAAS,CAAA,MAAA,IACrE,IAAK,CAAA,QAAA,CAAS,MAAO,CAAA,4BAA4B,CAAM,KAAA,aAAA,IACvD,IAAK,CAAA,QAAA,CAAS,IAAQ,IAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,UAAW,CAAA,aAAa,CAAC,CAAA,CAAA;AACpE,IAAI,IAAA,WAAA,CAAY,WAAW,CAAG,EAAA;AAC5B,MAAA,OAAA;AAAA,KACF;AACA,IAAA,OAAA,CAAQ,GAAI,CAAA,cAAA,EAAgB,WAAY,CAAA,CAAC,CAAC,CAAA,CAAA;AAC1C,IAAA,cAAA,CAAe,uBAAwB,CAAA,WAAA,CAAY,CAAC,CAAC,CAAC,CAAA,CAAA;AAAA,GACrD,EAAA,CAAC,mBAAqB,EAAA,uBAAuB,CAAC,CAAA,CAAA;AAEjD,EAAA,uBAEKA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,EAAA,WAAA,IAAe,WAAY,CAAA,QAAA,oBAC1BA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,kBAAAA,cAAA,CAAA,aAAA,CAAC,IAAK,EAAA,EAAA,KAAA,EAAO,YAAc,EAAA,QAAA,EAAU,eACnC,EAAA,kBAAAA,cAAA,CAAA,aAAA,CAAC,OAAI,KAAM,EAAA,SAAA,EAAU,CACrB,kBAAAA,cAAA,CAAA,aAAA,CAAC,GAAI,EAAA,EAAA,KAAA,EAAM,SAAU,EAAA,CAAA,+CACpB,GAAI,EAAA,EAAA,KAAA,EAAM,QAAS,EAAA,CAAA,kBACnBA,cAAA,CAAA,aAAA,CAAA,GAAA,EAAA,EAAI,KAAM,EAAA,eAAA,EAAgB,mBAC1BA,cAAA,CAAA,aAAA,CAAA,GAAA,EAAA,EAAI,KAAM,EAAA,SAAA,EAAU,CACvB,CAAA,EACD,YAAiB,KAAA,CAAA,iDACf,6BAA8B,EAAA,EAAA,WAAA,EAA0B,CAE1D,EAAA,YAAA,KAAiB,CAChB,oBAAAA,cAAA,CAAA,aAAA,CAAC,6BAA8B,EAAA,EAAA,WAAA,EAA0B,GAE1D,YAAiB,KAAA,CAAA,oBACfA,cAAA,CAAA,aAAA,CAAA,4BAAA,EAAA,EAA6B,WAA0B,EAAA,CAAA,EAEzD,YAAiB,KAAA,CAAA,iDACf,mCAAoC,EAAA,EAAA,WAAA,EAA0B,CAEhE,EAAA,YAAA,KAAiB,CAChB,oBAAAA,cAAA,CAAA,aAAA,CAAC,6BAA8B,EAAA,EAAA,WAAA,EAA0B,CAE3D,CACA,CAAA,CAAA;AAEN;;;;"}