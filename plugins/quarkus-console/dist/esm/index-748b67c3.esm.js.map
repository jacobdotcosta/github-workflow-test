{"version":3,"file":"index-748b67c3.esm.js","sources":["../../src/routes.ts","../../src/plugin.ts","../../src/types.ts","../../src/components/ui/Status.tsx","../../src/components/QuarkusApplicationDetailsCard.tsx","../../src/components/QuarkusIcon/QuarkusIcon.tsx"],"sourcesContent":["import { createRouteRef } from '@backstage/core-plugin-api';\n\nexport const rootRouteRef = createRouteRef({\n  id: 'quarkus-console',\n});\n","import {createPlugin, createRoutableExtension} from '@backstage/core-plugin-api';\nimport {rootRouteRef} from './routes';\n\nexport const QuarkusConsolePlugin = createPlugin({\n    id: 'quarkus-console',\n    routes: {\n        root: rootRouteRef,\n    },\n});\n\nexport const QuarkusConsolePage = QuarkusConsolePlugin.provide(\n    createRoutableExtension({\n        name: 'QuarkusPage',\n        component: () => import('./components/QuarkusPage').then(m => m.default),\n        mountPoint: rootRouteRef,\n    }),\n);\n","import {\n  V1ObjectMeta,\n  V1CronJob,\n  V1DaemonSet,\n  V1Deployment,\n  V1DeploymentCondition,\n  V1Job,\n  V1Pod,\n  V1PodSpec,\n  V1ReplicaSet,\n  V1Service,\n  V1StatefulSet,\n  V1Secret,\n  V1ConfigMap,\n  V1PersistentVolumeClaim,\n} from '@kubernetes/client-node';\n\nexport type GroupVersionKind = {\n  kind: string;\n  apiVersion: string;\n  apiGroup?: string;\n};\n\nexport type Model = GroupVersionKind & {\n  abbr: string;\n  labelPlural: string;\n  color?: string;\n  plural?: string;\n};\n\nexport type K8sWorkloadResource =\n  | V1Deployment\n  | V1Pod\n  | V1Service\n  | V1ReplicaSet\n  | V1CronJob\n  | V1DaemonSet\n  | V1Job\n  | V1StatefulSet;\n\nexport type K8sVolumeResource =\n  | V1Secret\n  | V1ConfigMap\n  | V1PersistentVolumeClaim\n\nexport type K8sResource = K8sWorkloadResource | K8sVolumeResource;\n\n\nexport type K8sResponseData = {\n  [key: string]: { data: K8sResource[] };\n};\n\nexport type ClusterError = {\n  errorType?: string;\n  message?: string;\n  resourcePath?: string;\n  statusCode?: number;\n};\n\nexport type ClusterErrors = ClusterError[];\n\nexport type K8sResourcesContextData = {\n  watchResourcesData?: K8sResponseData;\n  loading?: boolean;\n  responseError?: string;\n  selectedClusterErrors?: ClusterErrors;\n  clusters: string[];\n  setSelectedCluster: React.Dispatch<React.SetStateAction<number>>;\n  selectedCluster?: number;\n};\n\n\n\n//\n// Application\n//\n\nexport declare type K8sResourceCommon = {\n};\n\nexport type Snapshot = {\n name: string;\n x: string; \n y: number;\n}\n\nexport type Metrics = {\n  cpu?: Snapshot[];\n  memory?: Snapshot[];\n  gcPause?: Snapshot[];\n  gcOverhead?: Snapshot[];\n};\n\nexport type Application = {\n  apiVersion?: string;\n  kind?: string;\n  metadata?: V1ObjectMeta;\n  cpu?: string;\n  memory?: string;\n  url?: string;\n  metrics?: Metrics;\n  spec?: V1PodSpec;\n  status?: {\n    availableReplicas?: number;\n    collisionCount?: number;\n    conditions?: V1DeploymentCondition[];\n    observedGeneration?: number;\n    readyReplicas?: number;\n    replicas?: number;\n    unavailableReplicas?: number;\n    updatedReplicas?: number;\n  };\n};\n\nexport interface ApplicationPageProps {\n  application: Application;\n}\n\nexport function deploymentToApplication(deployment: V1Deployment): Application {\n  return {\n    kind: 'Deployment',\n    metadata: deployment?.metadata,\n    spec: deployment?.spec?.template?.spec,\n    metrics: {\n      cpu: [],\n      memory: [],\n      gcPause: [],\n      gcOverhead: [],\n    },\n    status: deployment?.status,\n  };\n};\n\nexport class Version {\n  version: string;\n  major: number;\n  minor: number;\n  patch: number;\n\n  constructor(version: string, major: number, minor: number, patch: number) {\n    this.version = version;\n    this.major = major;\n    this.minor = minor;\n    this.patch = patch;\n  }\n\n  // Static method to parse a version string\n  static parseVersion(version: string): Version | null {\n    const versionParts = version ? version.replace(/[^0-9.]/g, '').split('.') : [];\n    let major = 0;\n    let minor = 0;\n    let patch = 0;\n\n    if (versionParts.length >= 3) {\n      major = parseInt(versionParts[0], 10);\n      minor = parseInt(versionParts[1], 10);\n      patch = parseInt(versionParts[2], 10);\n    } else if (versionParts.length === 2) {\n      major = parseInt(versionParts[0], 10);\n      minor = parseInt(versionParts[1], 10);\n      // patch defaults to 0\n    } else if (versionParts.length === 1) {\n      major = parseInt(versionParts[0], 10);\n      // minor and patch default to 0\n    } else {\n      // Return null if the input is not valid\n      return null;\n    }\n\n    return new Version(version, major, minor, patch);\n  }\n}\n","import React from 'react';\n\nimport CheckCircle from '@material-ui/icons/CheckCircle';\nimport AccessTime from '@material-ui/icons/AccessTime';\nimport HighlightOff from '@material-ui/icons/HighlightOff';\n\ninterface StatusProps {\n  title?: string;\n  status?: string;\n}\n\nconst Status: React.FC<StatusProps> = ({ title, status }) => {\n  const renderIcon = () => {\n    switch (status) {\n      case 'Succeeded':\n        return <CheckCircle style={{ color: 'green' }} />;\n      case 'Failed':\n        return <HighlightOff style={{ color: 'red' }} />;\n      case 'Pending':\n        return <AccessTime style={{ color: 'gray' }} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <>\n      {title}\n      {renderIcon()}\n    </>\n  );\n};\n\nexport default Status;\n","import React, { useEffect, useState } from 'react';\nimport {Application, ApplicationPageProps, Version } from \"../types\";\nimport { Box, Card, CardContent, CardHeader, CircularProgress, Typography } from '@material-ui/core';\nimport Status from './ui/Status';\n\nexport const QuarkusApplicationDetailsCard: React.FC<ApplicationPageProps> = ({ application }) => {\n\n  const [name, setName] = useState<string>();\n  const [namespace, setNamespace] = useState<string>();\n  const [kind, setKind] = useState<string>();\n  const [version, setVersion] = useState<string|null>();\n  const [buildTimestamp, setBuildTimestamp] = useState<string|null>();\n  const [vcsUri, setVcsUri] = useState<string|null>();\n  const [location, setLocation] = useState<string>();\n  const [healthEndpoint, setHealthEndpoint] = useState<string>();\n  const [healthEndpointStatus, setHealthEndpointStatus] = useState<string>('Pending');\n  const [metricsEndpoint, setMetricsEndpoint] = useState<string>();\n  const [metricsEndpointStatus, setMetricsEndpointStatus] = useState<string>('Pending');\n  const [infoEndpoint, setInfoEndpoint] = useState<string>();\n  const [infoEndpointStatus, setInfoEndpointStatus] = useState<string>('Pending');\n  const [produiEndpoint, setProduiEndpoint] = useState<string>();\n  const [produiEndpointStatus, setProduiEndpointStatus] = useState<string>('Pending');\n  const [framework, setFramework] = useState<string>();\n  const [frameworkUrl, setFrameworkUrl] = useState<string>();\n  const [frameworkVersion, setFrameworkVersion] = useState<Version|null>();\n  const [releaseNotesUrl, setReleaseNotesUrl] = useState<string>();\n\n  useEffect(() => {\n    if (application && application.metadata) {\n      const quarkusVersion = getQuarkusVersion(application);\n      setKind(application.kind);\n      setName(application.metadata.name);\n      setNamespace(application.metadata.namespace);\n      setVersion(getApplicationVersion(application));\n      setBuildTimestamp(getBuildTimestamp(application));\n      setVcsUri(getVcsUri(application));\n      setLocation(application.url);\n      setHealthEndpoint(getHealthCheckEndpoint(application));\n      setHealthEndpointStatus(getHealthStatus(application));\n      setMetricsEndpoint(\"/q/metrics\");\n      checkMetricsEndpointStatus(application);\n      setInfoEndpoint(\"/q/info\");\n      checkInfoEndpointStatus(application);\n      setProduiEndpoint(\"/q/dev\");\n      checkProduiEndpointStatus(application);\n      setFramework(\"quarkus\");\n      setFrameworkVersion(quarkusVersion);\n    }\n  }, [application]);\n\n  useEffect(() => {\n    switch (framework) {\n      case \"quarkus\":\n        setFrameworkUrl(\"https://quarkus.io/\");\n        break;\n      default:\n      setFrameworkUrl(\"\");\n      break;\n    } \n  }, [framework])\n\n  useEffect(() => {\n    if (frameworkVersion && frameworkVersion.version) {\n      const releaseUrl = `https://github.com/quarkusio/quarkus/releases/tag/${frameworkVersion.version}`; \n      if (!frameworkVersion.version.endsWith('-SNAPSHOT')) {\n        setReleaseNotesUrl(releaseUrl); \n      }\n    }\n  }, [frameworkVersion]);\n\n\n  function getHealthCheckEndpoint(application: Application): string {\n    if (application && application.spec && application.spec.containers) {\n      for (const container of application.spec.containers) {\n        if (container.readinessProbe?.httpGet?.path) {\n          return container.readinessProbe.httpGet.path;\n        }\n      }\n    }\n    return '';\n  }\n\n  function getVcsUri(application: Application): string | null {\n    if (application && application.metadata && application.metadata.annotations) {\n      return application.metadata.annotations[\"app.openshift.io/vcs-uri\"];\n    }\n    return null;\n  }\n\n  function convertGitUrlToHttp(gitUrl: string): string {\n    if (!gitUrl) {\n\n    }\n    // Regular expressions to match SSH and other non-HTTP Git URLs for GitHub and GitLab\n    const githubSshRegex = /^(git@github\\.com:)([^#]+)/;\n    const gitlabSshRegex = /^(git@gitlab\\.com:)([^#]+)/;\n\n    // Check if the URL is a GitHub SSH URL\n    if (githubSshRegex.test(gitUrl)) {\n      return gitUrl.replace(githubSshRegex, 'https://github.com/$2');\n    }\n\n    // Check if the URL is a GitLab SSH URL\n    if (gitlabSshRegex.test(gitUrl)) {\n      return gitUrl.replace(gitlabSshRegex, 'https://gitlab.com/$2');\n    }\n\n    // If it's already an HTTP URL or another form, return as is\n    return gitUrl;\n  }\n\n  function getBuildTimestamp(application: Application): string | null {\n    if (application && application.metadata && application.metadata.annotations) {\n      return application.metadata.annotations[\"app.quarkus.io/build-timestamp\"];\n    }\n    return null;\n  }\n\n  function getApplicationVersion(application: Application): string | null {\n    if (application && application.metadata && application.metadata.annotations) {\n      return application.metadata.annotations[\"app.kubernetes.io/version\"];\n    }\n    return null;\n  }\n\n  function getQuarkusVersion(application: Application): Version | null {\n    if (application && application.metadata && application.metadata.annotations) {\n      return Version.parseVersion(application.metadata.annotations[\"app.quarkus.io/quarkus-version\"]);\n    }\n    return null;\n  }\n\n  function getHealthStatus(application: Application): string {\n    return application.status && application.status.replicas === application.status.availableReplicas ? \"Succeeded\" : \"Failed\";\n  }\n\n\n  function checkMetricsEndpointStatus(application: Application) {\n    if (application) {\n      setMetricsEndpointStatus(\"Succeeded\");\n    } else {\n      setMetricsEndpointStatus(\"Failed\");\n    }\n  }\n\n  function checkInfoEndpointStatus(application: Application) {\n    if (application) {\n      setInfoEndpointStatus(\"Succeeded\");\n    } else {\n      setInfoEndpointStatus(\"Failed\");\n    }\n  }\n\n  function checkProduiEndpointStatus(application: Application) {\n    if (application) {\n      setProduiEndpointStatus(\"Succeeded\");\n    } else {\n      setProduiEndpointStatus(\"Failed\");\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader title=\"Application\" />\n      <CardContent>\n        {application ? (\n          <Box>\n            <Card>\n              <CardHeader title=\"Details\" />\n              <CardContent>\n                <Typography variant=\"body1\"><strong>Kind:</strong> {kind}</Typography>\n                <Typography variant=\"body1\"><strong>Name:</strong> {name}</Typography>\n                <Typography variant=\"body1\"><strong>Namespace:</strong> {namespace}</Typography>\n                <Typography variant=\"body1\"><strong>Version:</strong> {version}</Typography>\n                <Typography variant=\"body1\"><strong>Build Timestamp:</strong> {buildTimestamp}</Typography>\n                {vcsUri && (\n                  <Typography variant=\"body1\">\n                    <strong>Version Control:</strong>\n                    <a href={convertGitUrlToHttp(vcsUri)} target=\"_blank\" rel=\"noopener noreferrer\">\n                      {vcsUri}\n                    </a>\n                  </Typography>\n                )}\n                <Typography variant=\"body1\">\n                  <strong>Location:</strong>\n                  <a href={location} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {location}\n                  </a>\n                </Typography>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader title=\"Endpoints\" />\n              <CardContent>\n                <Typography variant=\"body1\"><strong>Health Endpoint:</strong> <Status title={healthEndpoint} status={healthEndpointStatus} /></Typography>\n                <Typography variant=\"body1\"><strong>Metrics Endpoint:</strong> <Status title={metricsEndpoint} status={metricsEndpointStatus} /></Typography>\n                <Typography variant=\"body1\"><strong>Info Endpoint:</strong> <Status title={infoEndpoint} status={infoEndpointStatus} /></Typography>\n                <Typography variant=\"body1\"><strong>Prod UI Endpoint:</strong> <Status title={produiEndpoint} status={produiEndpointStatus} /></Typography>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader title=\"Framework\" />\n              <CardContent>\n                <Typography variant=\"body1\">\n                  <strong>Framework:</strong>\n                  {frameworkUrl ? (\n                    <a href={frameworkUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                      {framework}\n                    </a>\n                  ) : (\n                      framework\n                    )}\n                </Typography>\n                {frameworkVersion && (\n                  <>\n                    <Typography variant=\"body1\">\n                      <strong>Version:</strong>\n                      {releaseNotesUrl ? (\n                        <a href={releaseNotesUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                          {frameworkVersion.version}\n                        </a>\n                      ) : (\n                          frameworkVersion.version\n                        )}\n                    </Typography>\n                    <Typography variant=\"body1\"><strong>Major Version:</strong> {frameworkVersion.major}</Typography>\n                    <Typography variant=\"body1\"><strong>Minor Version:</strong> {frameworkVersion.minor}</Typography>\n                    <Typography variant=\"body1\"><strong>Patch Version:</strong> {frameworkVersion.patch}</Typography>\n                    </>\n                )}\n              </CardContent>\n            </Card>\n          </Box>\n        ) : (\n            <CircularProgress />\n          )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default QuarkusApplicationDetailsCard;\n","import { SvgIcon, SvgIconProps } from '@material-ui/core';\nimport React from 'react';\n\n// Quarkus SVG => https://www.svgrepo.com/svg/342149/quarkus\nexport const QuarkusIcon = (props: SvgIconProps) => (\n    <SvgIcon {...props} viewBox=\"0 0 32 32\">\n        <path\n            fill=\"currentColor\"\n            width=\"1em\"\n            height=\"1em\"\n            display=\"inline-block\"\n            d=\"M17.052 21.287l5.161-2.984v-5.959l-5.161 2.979zM17.541 21.568l4.672 2.697v-5.391l-4.672 2.699zM21.932 11.287v-5.391l-4.672 2.692 4.672 2.693zM16.771 8.875l-5.167 2.98 5.167 2.984 5.161-2.984zM16.276 8.588l-4.672-2.692v5.391zM22.708 12.631v5.385l4.667-2.693-4.667-2.697zM16.489 21.287v-5.964l-5.167-2.979v5.959zM10.828 12.625l-4.667 2.697 4.667 2.693zM11.323 18.875v5.391l4.672-2.697zM26.677 0.177h-21.371c-2.921 0-5.307 2.359-5.307 5.239v21.111c0 2.885 2.385 5.239 5.307 5.239h14.631l-3.948-9.473-2.864 5.984h-7.819c-0.957 0-1.771-0.803-1.771-1.749v-21.111c0-0.943 0.813-1.744 1.771-1.744h21.371c0.959 0 1.771 0.801 1.771 1.744v21.111c0 0.947-0.812 1.749-1.771 1.749h-4.636l1.453 3.489h3.183c2.916 0 5.307-2.353 5.307-5.239v-21.111c0-2.88-2.391-5.239-5.307-5.239z\"\n        />\n    </SvgIcon>\n);\n\n\n"],"names":["React","application"],"mappings":"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"}